(= 2 (call/cc (lambda (proc) 2)))
(= 3 (call/cc (lambda (proc) (proc 3))))

(catch
    (lambda ()
      (raise 'fail))
  (lambda (reason)
    (eq 'fail reason)))

(= 6 (catch
         (lambda (x)
           (catch
               (lambda ()
                 (raise 1))
             (lambda (x)
               (raise (+ 2 x)))))
       (lambda (x)
         (+ 3 x))))

(let ((x 0)
      (y 0))
  (set! y
        (dynamic-wind
         (lambda () (set! x (+ x 1)))
         (lambda () 99)
         (lambda () (set! x (+ x 1)))))
  (and (= y 99)
       (= x 2)))

(let ((x 0)
      (y 0))
  (set! y
        (catch
            (lambda ()
              (dynamic-wind
               (lambda () (set! x (+ x 1)))
               (lambda () (raise 10))
               (lambda () (set! x (+ x 1)))))
          (lambda (reason)
            99)))
  (and (= y 99)
       (= x 2)))
