(

(eql (list '(peg-seq (peg= #\x)) '())
     (_pp_expr3 "\"x\"" list '*error*))

(eql (list '(peg-seq (peg= #\")) '())
     (_pp_expr3 "\"\\\"\"" list '*error*))

(eql (list '(peg= (quote foo)) '())
     (_pp_expr3 "\'foo" list '*error*))

(eql (list (list 'var '(peg= (quote gaa)))
	   '())
     (_pp_binding "\'gaa:var" list '*error*))

(eql (list "   " "gaa")
     (_pp_optional_whitespaces "   gaa" list '*error*))

(eql (list (list 'foo 'bar 'baz)
	   '())
     ((peg-listof _pp_symbol _pp_optional_whitespaces)
      "foo bar  baz" list '*error*))

(eql (list '(peg-let ((a (peg= (quote x)))
		      (b (peg= (quote y)))
		      (c (peg= (quote z))))
	       (list c b a))
	   '())
     (_pp_expr2 "\'x:a \'y:b \'z:c => (list c b a)" list '*error*))

(eql (list '(peg-let ((a (peg= (quote x)))
		      (_ (peg= (quote y)))
		      (c (peg-seq (peg= #\c))))
	       (list a c))
	   '())
     (_pp_expr2 "\'x:a \'y \"c\":c => (list a c)" list '*error*))

(eql (list '(peg-seq (peg= (quote x))
		     (peg= (quote y))
		     (peg-seq (peg= #\c)))
           '())
     (_pp_expr2 "\'x \'y \"c\"" list '*error*))

(eql (list '(peg-alt (peg-seq (peg= (quote x)))
                     (peg-seq (peg= (quote y))))
	   '())
     (_pp_expr1 "\'x | \'y" list '*error))

(eql (list '(peg-alt (peg-let ((a (peg= (quote aa)))
			       (b (peg= (quote bb))))
		       (cons a b))
	             (peg-let ((_ (peg-seq (peg= #\=) (peg= #\>)))
			       (c (peg= (quote cc))))
		       c)
                     (peg-seq (peg= (quote d))))
            '())
     (_pp_expr1 "\'aa:a \'bb:b => (cons a b) | \"=>\" \'cc:c => c | \'d"
		list '*error*))

;; TODO: peg*,+:   Rename _pp_expr3 to _pp_expr4, then
;;   _pp_expr3 ::= _pp_expr4:e "+"   => `(peg+ ,e)
;;               | _pp_expr4:e "*"   => `(peg* ,e)
;;               | _pp_expr4:e       => e

;; TODO: Rules:    identifier "::=" expr1
;;   _pp_rule ::= _pp_symbol:n "::=" _pp_expr1:e  => `(rule ,n ,e)

;; TODO: Grammar:  "meta" identifier "{" rule*:rs "}"

)
