
(eql? (list '(peg= #\x) '())
      (_pp_expr3 (string->list "\"x\"") list error))

(eql? (list '(peg= #\x) '())
      (_pp_expr3 (string->list " \"x\"") list error))

(eql? (list '(peg= #\") '())
      (_pp_expr3 (string->list "\"\\\"\"") list error))

(eql? (list '(peg= (quote foo)) '())
      (_pp_expr3 (string->list "'foo") list error))

(eql? (list '(peg-indirect foo) '())
      (_pp_expr4 (string->list "foo") list error))

(eql? (list '(peg-not (peg-indirect a))
            '())
      (_pp_expr4 (string->list "~a")
                 list error))

(eql? (list (list 'var '(peg= (quote gaa)))
            '())
      (_pp_binding (string->list "'gaa:var") list error))

(eql? (list (list 'var '(peg= (quote gaa)))
            '())
      (_pp_binding (string->list " 'gaa:var") list error))

(eql? (list (string->list "   ") (string->list "gaa"))
      (_pp_optional_whitespaces (string->list "   gaa") list error))

(eql? (list (list 'foo 'bar 'baz)
            '())
      ((peg-listof* _pp_symbol _pp_optional_whitespaces)
       (string->list "foo bar  baz") list error))

(eql? (list (list)
            '(#\Space))
      ((peg-listof* _pp_symbol _pp_optional_whitespaces)
       (string->list " ") list error))

(parse-fail? (peg-listof+ _pp_symbol _pp_optional_whitespaces)
             (string->list " "))

(eql? (list '(peg-let ((a (peg= (quote x)))
                       (b (peg= (quote y)))
                       (c (peg= (quote z))))
	       (list c b a))
            '())
      (_pp_expr2 (string->list "'x:a 'y:b 'z:c => (list c b a)") list error))

(eql? (list '(peg-let ((a (peg= (quote x)))
                       (_ (peg= (quote y)))
                       (c (peg= #\c)))
	       (list a c))
            '())
      (_pp_expr2 (string->list "'x:a 'y \"c\":c => (list a c)") list error))

(eql? (list '(peg-seq (peg= (quote x))
                      (peg= (quote y))
                      (peg= #\c))
            '())
      (_pp_expr2 (string->list "'x 'y \"c\"") list error))

(eql? (list '(peg-alt (peg= (quote x))
                      (peg= (quote y)))
            '())
      (_pp_expr1 (string->list "'x | 'y") list error))

(eql? (list '(peg+ (peg-seq (peg-indirect a) (peg-indirect b)))
            '())
      (_pp_expr1 (string->list "(a b)+")
                 list error))

(eql? (list '(peg-alt (peg-let ((a (peg= (quote aa)))
                                (b (peg-not (peg-indirect bb))))
                        (cons a b))
                      (peg-let ((_ (peg-seq (peg= #\=) (peg= #\>)))
                                (c (peg= (quote cc))))
                        c)
                      (peg= (quote d)))
            '())
      (_pp_expr1 (string->list "'aa:a ~bb:b => (cons a b) | \"=>\" 'cc:c => c | 'd")
                 list error))

(eql? (list '(peg* (peg= 'foo)) '())
      (_pp_expr3 (string->list "'foo*") list error))

(eql? (list '(peg+ (peg= 'foo)) '())
      (_pp_expr3 (string->list "'foo+") list error))

;; Tests expression nesting and precedence.
(eql? (list '(peg-alt
	      (peg-let ((a (peg* (peg-seq (peg= #\a) (peg= #\b))))
			(b (peg+ (peg= 'cd))))
	        (list a b))
	      (peg-seq (peg= 'foo) (peg= 'bar)))
            '())
      (_pp_expr1 (string->list "\"ab\"*:a 'cd+:b => (list a b) | 'foo 'bar")
                 list error))

(eql? (list '(defrule foobar (peg= 'baz))
            '())
      (_pp_rule (string->list "foobar ::= 'baz;")
                list error))

(eql? (list '(defgrammar fancy ()
               (defrule foo (peg= 'x))
               (defrule bar (peg= 'y))) '())
      (_pp_grammar (string->list "grammar fancy { foo ::= 'x; bar ::= 'y; }")
                   list error))

(eql? (list '(defgrammar trivial ()) '())
      (_pp_grammar (string->list "grammar trivial {}")
                   list error))

(eql? (list '(defgrammar trivial ((x A B C)
                                  (y D E))) '())
      (_pp_grammar (string->list "grammar trivial ((x A B C) (y D E)) {}")
                   list error))

;; TODO: Support comments in expression grammars.
;; TODO: Support more characters in symbol names.
