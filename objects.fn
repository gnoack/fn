(

;;;; ********************************
;;;; Types
;;;; ********************************

;; The type type links to itself: @type = ($make @type (make-dict))
(def @type ($make 1 2))
($mem-set! @type 0 @type)
($mem-set! @type 1 (make-dict))
(defn type? (x)
  (eq (type-of x) @type))

; @cons and others must be created early for object creation from C,
; so we need some retroactive patching.  Idea is still this:
;  (def @cons ($make @type (make-dict)))
($mem-set! @array 0 @type)
($mem-set! @array 1 (make-dict))
($mem-set! @cons 0 @type)
($mem-set! @cons 1 (make-dict))
($mem-set! @dict 0 @type)
($mem-set! @dict 1 (make-dict))
($mem-set! @frame 0 @type)
($mem-set! @frame 1 (make-dict))
($mem-set! @string 0 @type)
($mem-set! @string 1 (make-dict))

; Same procedure for @procedure.
($mem-set! @procedure 0 @type)
($mem-set! @procedure 1 (make-dict))
($mem-set! @native-procedure 0 @type)
($mem-set! @native-procedure 1 (make-dict))
($mem-set! @compiled-procedure 0 @type)
($mem-set! @compiled-procedure 1 (make-dict))

;; TODO: Supertypes?
(defmacro deftype (name)
  `(def ,name ($make @type (make-dict))))

(deftype @mem)
(deftype @smallint)
(deftype @character)
(deftype @symbol)
(deftype @nil)
(deftype @mem-block)

;; Hardcoded for half-primitive values like integers,
;; characters, nil and so forth.  For higher-level,
;; memory-allocated values, the value at position 0
;; is used as type.
(defn type-of (x)
  (cond ((number? x) @smallint)
	((char? x) @character)
	((symbol? x) @symbol)
	((nil? x) @nil)
        ((mem-block? x) @mem-block)
	((mem? x) ($mem-get x 0))))


;;; Method definition

(defn install-method! (type selector method)
  (with-asserts ((type? type))
    (dict-put! ($mem-get type 1) selector method)))

(defmacro defm (type selector args body)
  `(install-method! ,type ,selector
                    (lambda (self ,@args) ,body)))


;;; Message sending

(defn %method-for-type (type selector)
  (dict-get ($mem-get type 1) selector))

(defn send (receiver message &rest arguments)
  (if (procedure? receiver)
      (apply receiver (cons message arguments))
      (apply (%method-for-type (type-of receiver) message)
             (cons receiver arguments))))

;; Like apply, but for sending messages.
(defn send-apply (receiver message arguments)
  (apply send (cons receiver (cons message arguments))))

(defn sender (message)
  (lambda (receiver &rest args)
    (send-apply receiver message args)))

)
