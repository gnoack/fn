(
; TODO: Move this predicate somewhere to the primitives...
(defn all? (list)
  (reduce (lambda (a b) (and a b)) list true))

(defn string? (str)
  (and (cons? str)
       (all? (map char? str))))

(defn char-escape (ch)
  (cond ((eq ch #\") "\\\"")
	(true (list ch))))

(defgeneric pprint (item))

(defmethod pprint ((cons? item))
  (string-concat "(" (string-join (map pprint item) " ") ")"))

; must go after cons for now, because generics don't support method
; ordering yet and string? is currently a subtype of cons?.
(defmethod pprint ((string? str))
  (string-concat "\"" (apply string-concat (map char-escape str)) "\""))

(defmethod pprint ((char? ch))
  (string-concat "\\" (char-escape ch)))

(defmethod pprint ((number? num))
  (int->string num 10))

(defmethod pprint ((nil? x))
  "nil")

(defmethod pprint ((symbol? sym))
  (symbol->string sym))

; String functions...

(defn string-join (strings delimiter)
  (if (cons? strings)
      (apply string-concat
	     (cons (first strings)
		   (map (lambda (s) (string-concat delimiter s))
			(rest strings))))
      '()))

)
