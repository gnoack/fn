(

(defn char-escape (ch)
  (cond ((eq ch #\") "\\\"")
	(true (list->string (list ch)))))

(defn pprint (item)
  (cond ((string? item) (string-append "\""
                                       (apply string-append
                                        (map char-escape
                                             (string->list item)))
                                       "\""))
        ((cons? item)   (if (and (eq 'quote (first item))
				 (eq 2 (length item)))
			    (string-append "'" (pprint (second item)))
			    (string-append "("
                                           (string-join (map pprint item) " ")
                                           ")")))
	((char? item)   (string-append "\\" (char-escape item)))
	((number? item) (int->string item 10))
	((nil? item)    "nil")
	((symbol? item) (symbol->string item))
	(true           (error "Don't know how to print this."))))

)
