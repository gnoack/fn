(defn last (l)
  (if (nil? (rest l))
      (first l)
      (last (rest l))))

(defn all-but-last (l)
  (if (nil? (rest l))
      '()
    (cons (first l)
          (all-but-last (rest l)))))

(defn take (n l)
  (if (and (< 0 n) (cons? l))
      (cons (first l)
            (take (- n 1) (rest l)))
    '()))

;; Lists
(defn length (seq)
  (if (cons? seq)
      (+ 1 (length (rest seq)))
      0))

(defn eql? (a b)
  (cond ((eq? a b)
         true)
        ((and (cons? a) (cons? b))
         (and (eql? (first a) (first b))
              (eql? (rest a) (rest b))))
        ((and (string? a) (string? b))
         (string=? a b))
        (true
         false)))

(defn filter (predicate? l)
  (if (cons? l)
      (if (predicate? (first l))
          (cons (first l)
                (filter predicate? (rest l)))
        (filter predicate? (rest l)))
    '()))

;; TODO: For speed, write in C using memcmp().
(defn $mem-block=? (a a-offset b b-offset size)
  (or (= 0 size)
      (and (eq? ($mem-block-byte-get a a-offset)
                ($mem-block-byte-get b b-offset))
           ($mem-block=? a (+ 1 a-offset)
                         b (+ 1 b-offset)
                         (- size 1)))))

;; TODO: For speed, write in C using memcpy().
(defn $memcpy (trg trg-offset src src-offset size)
  (if (= 0 size)
      trg
      (progn
        ($mem-block-byte-set! trg trg-offset
                              ($mem-block-byte-get src src-offset))
        ($memcpy trg (+ 1 trg-offset)
                 src (+ 1 src-offset)
                 (- size 1)))))

(defn $mem-populate-from-byte-list (trg trg-offset src-list)
  (if (cons? src-list)
      (progn
        ($mem-block-byte-set! trg trg-offset (first src-list))
        ($mem-populate-from-byte-list trg (+ 1 trg-offset) (rest src-list)))
      trg))

;;; Strings
(defn list->string (src-list)
  (let ((len (length src-list)))
    (let ((result-raw ($make-mem-block len)))
      ($mem-populate-from-byte-list result-raw 0 (map char->num src-list))
      ($make @string len 0 result-raw))))

(defn string-append (&rest as)
  (let ((total-string-size (reduce + (map string-size as) 0)))
    (let ((result-raw ($make-mem-block total-string-size)))
      ($mem-populate-from-string-list result-raw 0 as)
      ($make @string total-string-size 0 result-raw))))

(defn $mem-populate-from-string-list (trg trg-offset strings)
  (if (nil? strings)
      trg
      (let ((src-string (first strings)))
        ($memcpy trg trg-offset
                 (%string-raw src-string) (%string-offset src-string)
                 (string-size src-string))
        ($mem-populate-from-string-list
         trg (+ trg-offset (string-size src-string))
         (rest strings)))))

(defn string? (str)        (eq? @string (type-of str)))
(defn string-size (str)    ($mem-get str 1))
(defn %string-offset (str) ($mem-get str 2))
(defn %string-raw (str)    ($mem-get str 3))

(defn string-at (str n)
  (assert (string? str))
  (assert (<= 0 n (- (string-size str) 1)))
  (num->char ($mem-block-byte-get (%string-raw str)
                                  (+ (%string-offset str) n))))

(defn string->list (str)
  (defn %string->list-inner (str n acc)
    (if (= n 0)
        acc
      (%string->list-inner str (- n 1)
			   (cons (string-at str (- n 1)) acc))))
  (assert (string? str))
  (%string->list-inner str (string-size str)
                       (list)))

(defn string=? (a b)
  (assert (string? a))
  (assert (string? b))
  (and (= (string-size a) (string-size b))
       ($mem-block=? (%string-raw a) (%string-offset a)
                     (%string-raw b) (%string-offset b)
                     (string-size a))))

(defn string-prefix? (needle haystack)
  (assert (string? needle))
  (assert (string? haystack))
  (and (<= (string-size needle) (string-size haystack))
       ($mem-block=? (%string-raw needle) (%string-offset needle)
                     (%string-raw haystack) (%string-offset haystack)
                     (string-size needle))))

(defn map-string (fn str)
  (map fn (string->list str)))

(defn string-join (strings delimiter)
  (if (cons? strings)
      (apply string-append
	     (cons (first strings)
		   (map (lambda (s) (string-append delimiter s))
			(rest strings))))
      ""))

(defn substring (str begin &rest args)
  (let ((end (if (nil? args)
                 (string-size str)
               (first args))))
    (assert (<= begin end (string-size str)))
    ($make @string
           (- end begin)
           (+ (%string-offset str) begin)
           (%string-raw str))))

;; Number conversions
(defn digit->int (digit)
  (- (char->num digit) (char->num #\0)))

(defn string->int (str)
  (reduce (lambda (init next)
	    (+ (* 10 init) next))
	  (map digit->int (string->list str))
	  0))

;; Integer to string conversion.
(def _hex-digits "0123456789abcdef")
(defn _int->string (n base)
  (if (= 0 n)
      (list)
      (cons (string-at _hex-digits (mod n base))
	    (_int->string (/ n base) base))))

(defn int->string (n base)
  (let ((result (_int->string n base)))
    (if (nil? result)
        "0"
      (list->string (reverse result)))))


;; Ordering operators.

(defn <= (&rest args)
  (sequence-ordered? integer<= args))

(defn char<= (&rest args)
  (sequence-ordered? integer<=
		     (map char->num args)))

(defn binary< (x y)
  (and (<= x y)
       (not (= x y))))

(defn < (&rest args)
  (sequence-ordered? binary< args))


;; Checks that for each pair of neighbor
;; elements a, b in the sequence,
;; (in-order? a b) holds.
(defn sequence-ordered? (in-order? seq)
  (cond ((nil? seq) true)
	((nil? (rest seq)) true)
	(true 
	 (and (in-order? (first seq)
			 (first (rest seq)))
	      (sequence-ordered?
	       in-order? (rest seq))))))

; Right-reducing. (a (b (c end)))
(defn reduce-right (combine seq end)
  (if (nil? seq)
      end
      (combine (first seq)
	       (reduce-right combine
			     (rest seq)
			     end))))

;; Always return true (false).
(defn ->true (&rest args) true)
(defn ->false (&rest args) false)

(defn error (&rest args)
  (apply println (cons "*ERROR*: " args))
  (kill-lisp 1))

;; Utilities for dictionaries.  Tested in data-test.fn
(defn dict-size (dict) ($mem-get dict 1))

(defn dict-pprint (dict)
  (string-append "{"
                 (string-join
                  (map (lambda (x)
                         (string-append (pprint (first x)) ": " (pprint (rest x))))
                       (dict-key-value-pairs dict))
                  ", ")
                 "}"))

(defn eval (expr)
  ;; Evaluate the expression in the global environment.
  ;; This actually compiles the expression, creates a
  ;; zero-argument function from it, and calls that.
  ((compile-top-level-expr expr)))

;; TODO: Move file code to another module.
(defn with-file-writer (filename callback)
  (let ((buf ($make-mem-block 256))
        (pos 0)
        (file-handle (fopen filename "w")))
    (defn flush! ()
      (when (< 0 pos)
        (fwrite file-handle buf pos)
        (set! pos 0)))
    (defn write-byte! (byte)
      (when (= pos 256)
        (flush!))
      ($mem-block-byte-set! buf pos byte)
      (inc! pos))

    ;; TODO: Use `unwind-handler'.
    (dynamic-wind ->true
                  (lambda () (callback write-byte!))
                  (lambda ()
                    (flush!)
                    (fclose file-handle)))))

;; TODO: Move caching code to serialization module.
(defn serialize-to-file! (filename item)
  (with-file-writer
   filename
   (lambda (write-byte!)
     (serialize! item write-byte!))))

(defn deserialize-from-file! (filename win lose)
  (let ((contents (file->string filename))
        (pos 0))
    (if (string? contents)
        (win (deserialize!
              (lambda ()
                (unless (< pos (string-size contents))
                  (error "Trying to read beyond input at pos " pos))
                (inc! pos)
                (char->num (string-at contents (- pos 1))))))
      (lose))))

(defn deserialize-from-cache-file! (cache-filename min-timestamp calculate)
  (defn calculate-and-save! ()
    (let ((result (calculate)))
      (serialize-to-file! cache-filename result)
      result))
  (let ((cache-timestamp (file-timestamp cache-filename)))
    (if (and (not (nil? cache-timestamp))
             (<= min-timestamp cache-timestamp))
        (deserialize-from-file! cache-filename identity
                                calculate-and-save!)
      (calculate-and-save!))))

(defn cached-load-file! (filename)
  (map (lambda (proc) (proc))
       (deserialize-from-cache-file!
        (string-append filename "c")
        (file-timestamp filename)
        (lambda () (map compile-top-level-expr
                        (read-all (file->string filename)))))))

;; True if module loading should be cached.
(def *module-caching* true)

(defn load-file (filename)
  (if *module-caching*
      (cached-load-file! filename)
    (map eval (read-all (file->string filename)))))
