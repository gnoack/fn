
(->true
 (defmacro pp (name)
   `(@@ pegs-grammar ,name)))

(eql? (list '(peg= #\x) '())
      ((pp expr3) (string->list "\"x\"") list error))

(eql? (list '(peg= #\x) '())
      ((pp expr3) (string->list " \"x\"") list error))

(eql? (list '(peg= #\") '())
      ((pp expr3) (string->list "\"\\\"\"") list error))

(eql? (list '(peg= (quote foo)) '())
      ((pp expr3) (string->list "'foo") list error))

(eql? (list '(peg-indirect foo) '())
      ((pp expr4) (string->list "foo") list error))

(eql? (list '(peg-indirect list-of (peg-indirect sep) (peg-indirect item))
            '())
      ((pp expr4) (string->list "list-of(sep, item)") list error))

(eql? (list '(peg-not (peg-indirect a))
            '())
      ((pp expr4) (string->list "~a")
                  list error))

(eql? (list (list 'var '(peg= (quote gaa)))
            '())
      ((pp binding) (string->list "'gaa:var") list error))

(eql? (list (list 'var '(peg= (quote gaa)))
            '())
      ((pp binding) (string->list " 'gaa:var") list error))

(->true
 (def pp_optional_whitespaces (peg* (pp whitespace))))

(eql? (list (string->list "   ") (string->list "gaa"))
      (pp_optional_whitespaces (string->list "   gaa") list error))

(eql? (list (list 'foo 'bar 'baz)
            '())
      (((pp listof_or_nothing) (pp symbol) pp_optional_whitespaces)
       (string->list "foo bar  baz") list error))

(eql? (list (list)
            '(#\Space))
      (((pp listof_or_nothing) (pp symbol) pp_optional_whitespaces)
       (string->list " ") list error))

(parse-fail? ((pp listof) (pp symbol) pp_optional_whitespaces)
             (string->list " "))

(eql? (list '(peg-let ((a (peg= (quote x)))
                       (b (peg= (quote y)))
                       (c (peg= (quote z))))
	       (list c b a))
            '())
      ((pp expr2) (string->list "'x:a 'y:b 'z:c => (list c b a)") list error))

(eql? (list '(peg-let ((a (peg= (quote x)))
                       (_ (peg= (quote y)))
                       (c (peg= #\c)))
	       (list a c))
            '())
      ((pp expr2) (string->list "'x:a 'y \"c\":c => (list a c)") list error))

(eql? (list '(peg-seq (peg= (quote x))
                      (peg= (quote y))
                      (peg= #\c))
            '())
      ((pp expr2) (string->list "'x 'y \"c\"") list error))

(eql? (list '(peg-alt (peg= (quote x))
                      (peg= (quote y)))
            '())
      ((pp expr1) (string->list "'x | 'y") list error))

(eql? (list '(peg+ (peg-seq (peg-indirect a) (peg-indirect b)))
            '())
      ((pp expr1) (string->list "(a b)+")
                  list error))

(eql? (list '(peg-alt (peg-let ((a (peg= (quote aa)))
                                (b (peg-not (peg-indirect bb))))
                        (cons a b))
                      (peg-let ((_ (peg-seq (peg= #\=) (peg= #\>)))
                                (c (peg= (quote cc))))
                        c)
                      (peg= (quote d)))
            '())
      ((pp expr1) (string->list "'aa:a ~bb:b => (cons a b) | \"=>\" 'cc:c => c | 'd")
                  list error))

(eql? (list '(peg* (peg= 'foo)) '())
      ((pp expr3) (string->list "'foo*") list error))

(eql? (list '(peg+ (peg= 'foo)) '())
      ((pp expr3) (string->list "'foo+") list error))

;; Tests expression nesting and precedence.
(eql? (list '(peg-alt
	      (peg-let ((a (peg* (peg-seq (peg= #\a) (peg= #\b))))
			(b (peg+ (peg= 'cd))))
	        (list a b))
	      (peg-seq (peg= 'foo) (peg= 'bar)))
            '())
      ((pp expr1) (string->list "\"ab\"*:a 'cd+:b => (list a b) | 'foo 'bar")
                  list error))

(eql? (list '(defrule foobar () (peg= 'baz))
            '())
      ((pp rule) (string->list "foobar ::= 'baz;")
                 list error))

(eql? (list '(defrule a (b c) (peg= 'baz))
            '())
      ((pp rule) (string->list "a b c ::= 'baz;")
                 list error))

(eql? (list '(defgrammar fancy ()
               (defrule foo () (peg= 'x))
               (defrule bar () (peg= 'y))) '())
      ((pp grammar) (string->list "grammar fancy { foo ::= 'x; bar ::= 'y; }")
                    list error))

(eql? (list '(defgrammar trivial ()) '())
      ((pp grammar) (string->list "grammar trivial {}")
                    list error))

;; With imports.
(eql? (list '(defgrammar trivial ((x A B C)
                                  (y D E))) '())
      ((pp grammar) (string->list "grammar trivial ((x A B C) (y D E)) {}")
                    list error))

;; TODO: Support more characters in symbol names.
