
(defn pprint (item)
  ;; TODO: Stack printing.
  ;; TODO: Optimize memory consumption for string concatenation?
  (defn string-char-escape (ch)
    ;; TODO: Some cases are missing.
    (cond ((eq? ch #\") "\\\"")
          ((eq? ch #\Newline) "\\n")
          ((eq? ch #\Tab) "\\t")
          (true (list->string (list ch)))))
  (defn literal-char-escape (ch)
    (cond ((eq? ch #\Newline) "Newline")
          ((eq? ch #\Tab) "Tab")
          ((eq? ch #\Space) "Space")
          (true (list->string (list ch)))))
  (defn pprint-kv-pair (kv)
    (string-append (pprint (first kv)) ": " (pprint (rest kv))))
  (defn pprint-inner-list (l)
    (cond ((nil? l) "")
          ((cons? l) (if (nil? (rest l))
                         (pprint (first l))
                       (string-append (pprint (first l)) " "
                                      (pprint-inner-list (rest l)))))
          (true (string-append ". " (pprint l)))))
  ;; TODO: Rewrite with typecase
  (typecase item
    ((String) (string-append "\""
			     (apply string-append
				    (map string-char-escape
					 (string->list item)))
			     "\""))
    ((Dict)
     (string-append "#{"
		    (string-join (map pprint-kv-pair
				      (dict-key-value-pairs item))
				 ", ")
		    "}"))
    ((Array)
     (string-append "#["
		    (string-join (map pprint (array->list item)) ", ")
		    "]"))
    ((MemBlock) "#<MEM-BLOCK>")
    ((Cons)
     (if (and (eq? 'quote (first item))
	      (= 2 (length item)))
	 (string-append "'" (pprint (second item)))
       (string-append "(" (pprint-inner-list item) ")")))
    ((NativeProcedure)
     (string-append "<NATIVE-PROCEDURE "
		    (pprint (fn-name item)) ">"))
    ((Procedure)
     (string-append "<PROCEDURE " (pprint (fn-name item))
		    " " (pprint (fn-lambda-list item)) ">"))
    ((CompiledProcedure)
     (string-append "<COMPILED-PROCEDURE " (pprint (fn-name item))
		    " " (pprint (fn-lambda-list item)) ">"))
    ((Character)    (string-append "#\\" (literal-char-escape item)))
    ((Smallint)     (int->string item 10))
    ((Nil)          "()")
    ((Symbol)       (symbol->string item))
    ((Type)         (string-append "#<TYPE "
				   (type-name item)
				   ">"))
    ((DefinedVar)   (string-append "#<DefinedVar "
				   (symbol->string ($mem-get item 1))
				   "="
				   (pprint ($mem-get item 2))
				   ">"))
    ((UndefinedVar) (string-append "#<UndefinedVar "
				   (symbol->string ($mem-get item 1))
				   ">"))
    ((True)         "true")
    ((False)        "false")
    (else
     (cond
      ((has-method? item 'pprint) (send item 'pprint))
      ((mem? item)    (string-append "#<" (type-name (type-of item)) ">"))
      (true           "?UNPRINTABLE?")))))

(defn display (item)
  (if (string? item)
      (writeout item)
    (writeout (pprint item))))

(defn println (&rest args)
  (map display args)
  (writeout "\n")
  nil)

(defm Frame 'pprint ()
  (let ((id (int->string ($id self) 16))
	(name (fn-name (frame-procedure self))))
    (string-append "#<Frame " (pprint name) " @" id ">")))

;; TODO: Rather implement stack traces in C, for robustness!
;; TODO: Break dependency on this.
(defn frame-caller (f)     ($mem-get f 2))
(defn frame-procedure (f)  ($mem-get f 3))
(defn dframe-caller (f)    ($mem-get f 3))
(defn dframe-procedure (f) ($mem-get f 4))

(defn print-stack-trace (frame)
  (typecase frame
    ((Frame)  (progn
                (println " - " (frame-procedure frame))
                (print-stack-trace (frame-caller frame))))
    ((Dframe) (progn
                (println " - " (dframe-procedure frame))
                (print-stack-trace (dframe-caller frame))))
    (else nil)))
