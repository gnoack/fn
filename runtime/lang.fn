(def not (lambda (a)
	   (if a false true)))

;; Nil?
(def nil? (lambda (x)
	    (eq? nil x)))

;; =, a nicer eq? for numbers.
;; TODO: Support more number types.
(def = eq?)

;; Map
(def map (lambda (proc sequence)
	   (if (nil? sequence)
	       sequence
	       (cons (proc (first sequence))
		     (map proc (rest sequence))))))

;; Reduce
(def reduce (lambda (proc list start)
	      (if (nil? list)
		  start
		  (reduce proc
			  (rest list)
			  (proc start (first list))))))

(def identity (lambda (x) x))

(def second (lambda (list)  (first (rest list))))
(def third (lambda (list)   (first (rest (rest list)))))
(def fourth (lambda (list)  (first (rest (rest (rest list))))))

;; Check whether something is a list.
(def list?
  (lambda (l)
    (if (nil? l)
        true
      (if (cons? l)
          (list? (rest l))
        false))))

;; True iff all elements of the list fulfill the predicate.
(def all?
  (lambda (predicate? list)
    (if (cons? list)
        (if (predicate? (first list))
            (all? predicate? (rest list))
          false)
        true)))

;; True iff at least of of the list's elements fulfills the predicate.
(def any?
  (lambda (predicate? list)
    (if (cons? list)
        (if (predicate? (first list))
            true
          (any? predicate? (rest list)))
        false)))

(def append
  (lambda (&rest as)
    (if (nil? as) as
      (apply append-inner as))))

(def append-inner
  (lambda (a &rest as)
    (if (nil? as) a
      (if (nil? a)
          (apply append as)
        (cons (first a)
              (apply append
                     (cons (rest a) as)))))))

(def nth
  (lambda (seq n)
    (if (cons? seq)
        (if (= 0 n)
            (first seq)
          (nth (rest seq) (- n 1)))
      nil)))  ; Nothing found.  TODO: Make this an error.

;; Reversing sequences.  (As in SRFI-1)
(def xcons (lambda (l r)
	     (cons r l)))

(def reverse (lambda (seq)
	       (reduce xcons seq '())))

;; cons, cons?
(def cons
    (lambda (car cdr)	
      ($make @cons car cdr)))

;; TODO: Use `type-of' instead?  (Defined in objects.fn)
(def %has-mem-type?
  (lambda (value type)
    (if (mem? value)
        (eq? type ($mem-get value 0))
      false)))

(def cons?
  (lambda (value) (%has-mem-type? value @cons)))

(def native-procedure?
  (lambda (proc) (%has-mem-type? proc @native-procedure)))

(def lisp-procedure?
  (lambda (proc) (%has-mem-type? proc @procedure)))

(def compiled-procedure?
  (lambda (proc) (%has-mem-type? proc @compiled-procedure)))

(def procedure?
  (lambda (proc)
    (if (native-procedure? proc) true
    (if (lisp-procedure? proc) true
    (if (compiled-procedure? proc) true
      false)))))

;; See procedures.c for what fields mean what.
(def procedure-name (lambda (proc) ($mem-get proc 1)))
(def lisp-procedure-lambda-list (lambda (proc) ($mem-get proc 2)))
