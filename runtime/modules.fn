;; TODO: Discard 'modules.fn' for a better modularlization system.

;; Makes a dictionary with the values of the given symbols.  e.g. in
;; an environment where a and b are defined to 1 and 2,
;;
;;  (make-module a b) --> #{ a: 1, b: 2 }
(defmacro make-module (&rest symbols)
  (with-gensyms (result)
    `(let ((,result (make-dict)))
       ,@(map (lambda (sym)
                (assert (symbol? sym))
                `(dict-put! ,result ',sym ,sym))
              symbols)
       ,result)))

(defn expand-module-clauses (module-clauses)
  (defn expand-module-clause (clause)
    (destructure ((module-name &rest vars) clause)
      (defn make-let-clause* (new-name old-name)
        `(,new-name (dict-get ,module-name ',old-name)))
      (defn make-let-clause (var)
        ;; Calls emit with the binding name and the var name in the module.
        (cond ((symbol? var)  (make-let-clause* var var))
              ((list? var)    (make-let-clause* (first var) (second var)))
              (true           (error "Unsupported module import clause " var))))
      (map make-let-clause vars)))
  (apply append (map expand-module-clause module-clauses)))

;; Import and locally bind symbols from the given modules.
;; For example, for a module M that defines `a' and `b',
;; `a' and `b' can be imported as:
;;
;; (import ((M a b)) BODY)
;;
;; They can also be renamed as `my-a', `my-b' by
;;
;; (import ((M (my-a a) (my-b b))) BODY)
;;
;; The bindings are only valid within the BODY.
(defmacro import (module-clauses &rest body)
  `(let ,(expand-module-clauses module-clauses)
     ,@body))

(defmacro @@ (module name)
  `(dict-get ,module (quote ,name)))
