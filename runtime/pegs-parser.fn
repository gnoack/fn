
(defn make-peg-seq-expr (args)
  (if (= 1 (length args))
      (first args)  ;; Shortcut
    `(peg-seq ,@args)))

(defn make-peg-alt-expr (args)
  (if (= 1 (length args))
      (first args)  ;; Shortcut
    `(peg-alt ,@args)))

;; Generated from pegs.g
(defgrammar pegs-grammar ((base-grammar ALPHA DIGIT ANY WHITESPACE EPSILON) (lisp-grammar (LISP-STRING string) (LISP-EXPR expr))) (defrule whitespace () (peg-alt (peg-indirect WHITESPACE) (peg-seq (peg-seq (peg= #\/) (peg= #\/)) (peg+ (peg-seq (peg-not (peg= #\Newline)) (peg-indirect ANY)))))) (defrule token (peg) (peg-let ((_ (peg* (peg-indirect whitespace))) (t (peg-indirect peg)) (_ (peg* (peg-indirect whitespace)))) t)) (defrule listof (item sep) (peg-let ((a (peg-indirect item)) (as (peg* (peg-let ((_ (peg-indirect sep)) (it (peg-indirect item))) it)))) (cons a as))) (defrule listof_or_nothing (item sep) (peg-alt (peg-indirect listof (peg-indirect item) (peg-indirect sep)) (peg-indirect EPSILON))) (defrule openbracket () (peg-indirect token (peg= #\())) (defrule closebracket () (peg-indirect token (peg= #\)))) (defrule symbol_start () (peg-alt (peg-indirect ALPHA) (peg= #\_))) (defrule symbol_more () (peg-alt (peg-indirect symbol_start) (peg= #\-) (peg-indirect DIGIT))) (defrule symbol () (peg-let ((c (peg-indirect symbol_start)) (cs (peg* (peg-indirect symbol_more)))) (string->symbol (list->string (cons c cs))))) (defrule string_expr () (peg-let ((_ (peg* (peg-indirect whitespace))) (s (peg-indirect LISP-STRING))) (make-peg-seq-expr (map (lambda (ch) (quasiquote (peg= (unquote ch)))) (string->list s))))) (defrule symbol_expr () (peg-let ((_ (peg* (peg-indirect whitespace))) (_ (peg= #\')) (s (peg-indirect symbol))) (quasiquote (peg= '(unquote s))))) (defrule inv_args () (peg-alt (peg-let ((_ (peg= #\()) (as (peg-indirect listof_or_nothing (peg-indirect expr1) (peg-indirect token (peg= #\,)))) (_ (peg= #\))) (_ (peg* (peg-indirect whitespace)))) as) (peg-let ((_ (peg-indirect EPSILON))) (list)))) (defrule invocation_expr () (peg-let ((_ (peg* (peg-indirect whitespace))) (s (peg-indirect symbol)) (as (peg-indirect inv_args))) (quasiquote (peg-indirect (unquote s) (unquote-splicing as))))) (defrule bracketed_expr () (peg-let ((_ (peg-indirect openbracket)) (e (peg-indirect expr1)) (_ (peg-indirect closebracket))) e)) (defrule expr4 () (peg-alt (peg-indirect negated_expr) (peg-indirect string_expr) (peg-indirect symbol_expr) (peg-indirect invocation_expr) (peg-indirect bracketed_expr))) (defrule negated_expr () (peg-let ((_ (peg= #\~)) (e (peg-indirect expr4))) (quasiquote (peg-not (unquote e))))) (defrule plus_expr () (peg-let ((e (peg-indirect expr4)) (_ (peg= #\+))) (quasiquote (peg+ (unquote e))))) (defrule star_expr () (peg-let ((e (peg-indirect expr4)) (_ (peg= #\*))) (quasiquote (peg* (unquote e))))) (defrule expr3 () (peg-alt (peg-indirect plus_expr) (peg-indirect star_expr) (peg-indirect expr4))) (defrule bindingvar () (peg-alt (peg-let ((_ (peg= #\:)) (s (peg-indirect symbol))) s) (peg-let ((_ (peg-indirect EPSILON))) '_))) (defrule binding () (peg-let ((e (peg-indirect expr3)) (v (peg-indirect bindingvar))) (list v e))) (defrule action_sequence () (peg-let ((bs (peg-indirect listof (peg-indirect binding) (peg* (peg-indirect whitespace)))) (_ (peg-indirect token (peg-seq (peg= #\=) (peg= #\>)))) (action (peg-indirect LISP-EXPR))) (quasiquote (peg-let (unquote bs) (unquote action))))) (defrule sequence () (peg-let ((es (peg+ (peg-indirect token (peg-indirect expr3))))) (make-peg-seq-expr es))) (defrule expr2 () (peg-alt (peg-indirect action_sequence) (peg-indirect sequence))) (defrule expr1 () (peg-let ((es (peg-indirect listof (peg-indirect expr2) (peg-indirect token (peg= #\|))))) (make-peg-alt-expr es))) (defrule rule () (peg-let ((_ (peg* (peg-indirect whitespace))) (n (peg-indirect symbol)) (ps (peg* (peg-indirect token (peg-indirect symbol)))) (_ (peg-indirect token (peg-seq (peg= #\:) (peg= #\:) (peg= #\=)))) (e (peg-indirect expr1)) (_ (peg-indirect token (peg= #\;)))) (quasiquote (defrule (unquote n) (unquote ps) (unquote e))))) (defrule imports () (peg-alt (peg-let ((_ (peg-indirect openbracket)) (es (peg* (peg-indirect LISP-EXPR))) (_ (peg-indirect closebracket))) es) (peg-indirect EPSILON))) (defrule grammar () (peg-let ((_ (peg* (peg-indirect whitespace))) (_ (peg-indirect token (peg-seq (peg= #\g) (peg= #\r) (peg= #\a) (peg= #\m) (peg= #\m) (peg= #\a) (peg= #\r)))) (n (peg-indirect symbol)) (im (peg-indirect imports)) (_ (peg-indirect token (peg= #\{))) (rs (peg* (peg-indirect rule))) (_ (peg-indirect token (peg= #\})))) (quasiquote (defgrammar (unquote n) (unquote im) (unquote-splicing rs))))))
