;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; "Lexically scoped OO" using proxy objects.                     ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; This is wrapped in a progn to avoid a state during compilation
;; where the Dispatcher type is defined, but its 'unknownMessage:arguments:
;; isn't.
(progn
  (deftype Dispatcher)

  (defm Dispatcher 'unknownMessage:arguments: (selector args)
        (assert (not (eq? 'unknownMessage:arguments: selector)))
        ;; (writeout "unknown message: ")
        ;; (writeout (symbol->string selector))
        ;; (writeout "\n")
        (apply (dict-get ($mem-get self 1) selector)
               (cons self args))))

(defmacro dispatcher (name &rest defs)
  `(let ((%%dict (make-dict)))
     ,@(map (lambda (clause)
              `(dict-put! %%dict ,(first clause)
                          (lambda ,(cons name (second clause))
                            ,@(rest (rest clause)))))
            defs)
     ($make Dispatcher %%dict)))

(defm Dispatcher 'pprint ()
      (string-append "Dispatcher:" (pprint ($mem-get self 1))))
