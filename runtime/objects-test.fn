;; Types
(eq? Type (type-of Type))
(eq? Cons (type-of (cons 'a 'b)))
(eq? (type-of Cons) (type-of (type-of (cons 'a 'b))))
(not (eq? (type-of Cons) Type))
(eq? Smallint (type-of 12))
(eq? Character (type-of #\b))
(eq? Nil (type-of nil))
(eq? Symbol (type-of 'foobar))
(eq? MemBlock (type-of ($make-mem-block 4)))

(string=? "Object class" (type-name Type))
(string=? "Cons" (type-name Cons))
(string=? "MemBlock" (type-name MemBlock))

(eql? '(install-method! Foo 'bar
                        (lambda (self x y) (+ self x y)))
      (macroexpand '(defm Foo 'bar (x y)
                          (+ self x y))))

;; Before defining 'is-nil?
(not (has-method? nil 'is-nil?))

(->true (defm Nil 'is-nil? () true))
(send nil 'is-nil?)

;; After defining 'is-nil?
(has-method? nil 'is-nil?)

(->true (defm Smallint 'plus (x) (+ self x)))
(eq? 7 (send 4 'plus 3))

(subtype? Object Object)
(subtype? Cons Object)
(not (subtype? Object Cons))

(type? Object)
(type? Cons)
(type? Smallint)
(type? Character)
(type? Nil)
(type? True)
(type? False)
(type? String)
(not (type? 1))
(not (type? nil))
(not (type? true))
(not (type? false))
(not (type? "foo"))

;; Deftype
(progn
  (deftype ExampleType)
  (type? ExampleType))
(progn
  (defm ExampleType 'foo () 123)
  (def %example-object ($make ExampleType))
  (eq? 123 (send %example-object 'foo)))
