(def *serialize-prefix-smallint* (char->num #\i))
(def *serialize-prefix-nil* (char->num #\0))
(def *serialize-prefix-cons* (char->num #\.))
(def *serialize-prefix-array* (char->num #\[))
(def *serialize-prefix-character* (char->num #\c))
(def *serialize-prefix-string* (char->num #\"))
(def *serialize-prefix-symbol* (char->num #\S))
(def *serialize-prefix-mem-block* (char->num #\#))
(def *serialize-prefix-compiled-procedure* (char->num #\B))

(defn $mem-for-each-byte! (mem start-idx end-idx action!)
  (when (< start-idx end-idx)
    (action! ($mem-block-byte-get mem start-idx))
    ($mem-for-each-byte! mem (+ 1 start-idx) end-idx action!)))

(defn serialize-integer! (n write-byte!)
  ;; flag is 128 or 0, depending on whether high-bit is set.
  (defn write-bytes! (n flag)
    (if (< n 128)
        (write-byte! (+ flag n))
      (progn
        (write-bytes! (/ n 128) 128)
        (write-byte! (+ flag (mod n 128))))))
  (write-bytes! n 0))

(defn deserialize-integer! (read-byte!)
  (defn read-bytes! (acc)
    (let ((byte (read-byte!)))
      ;; TODO: This checks for the most significant bit.
      (if (< byte 128)
          (+ (* 128 acc) byte)
        (read-bytes! (+ (* 128 acc)
                        (- byte 128))))))
  (read-bytes! 0))

(defn serialize! (item write-byte!)
  (typecase item
    ((@nil)
     (write-byte! *serialize-prefix-nil*))
    ((@compiled-procedure)
     (progn
       (write-byte! *serialize-prefix-compiled-procedure*)
       (unless (nil? ($mem-get item 4))
         (error "Can only serialize procedures in global environment."))
       (serialize! ($mem-get item 1) write-byte!)  ; name
       (serialize! ($mem-get item 2) write-byte!)  ; lambda-list
       (serialize! ($mem-get item 5) write-byte!)  ; bytecode
       (serialize! ($mem-get item 6) write-byte!)  ; ip
       (serialize! ($mem-get item 7) write-byte!)  ; lookup-table
       (serialize! (fn-max-stack-depth item) write-byte!)
       ))
    ((@mem-block)
     (progn
       (write-byte! *serialize-prefix-mem-block*)
       (serialize-integer! (mem-block-size item) write-byte!)
       ($mem-for-each-byte! item 0 (mem-block-size item) write-byte!)))
    ((@symbol)
     (progn
       (write-byte! *serialize-prefix-symbol*)
       (serialize! (symbol->string item) write-byte!)))
    ((@array)
     (progn
       (write-byte! *serialize-prefix-array*)
       (serialize-integer! (array-size item) write-byte!)
       (dolist (array-item (array->list item))
         (serialize! array-item write-byte!))))
    ((@string)
     (progn
       (write-byte! *serialize-prefix-string*)
       (serialize-integer! (string-size item) write-byte!)
       ($mem-for-each-byte! (%string-raw item)
                            (%string-offset item)
                            (+ (%string-offset item) (string-size item))
                            write-byte!)))
    ((@cons)
     (progn
       (write-byte! *serialize-prefix-cons*)
       (serialize! (first item) write-byte!)
       (serialize! (rest item) write-byte!)))
    ((@smallint)
     (progn
       (write-byte! *serialize-prefix-smallint*)
       (serialize-integer! item write-byte!)))
    ((@character)
     (progn
       (write-byte! *serialize-prefix-character*)
       (write-byte! (char->num item))))
    (else
     (error "Unsupported type for serialization."))))

(defn deserialize-into-mem-block! (target start-idx end-idx read-byte!)
  (if (< start-idx end-idx)
      (progn
        ($mem-block-byte-set! target start-idx (read-byte!))
        (deserialize-into-mem-block! target (+ 1 start-idx) end-idx read-byte!))
    target))

(defn deserialize-into-array! (target start-idx end-idx read-byte!)
  (if (< start-idx end-idx)
      (progn
        (array-set! target start-idx (deserialize! read-byte!))
        (deserialize-into-array! target (+ 1 start-idx) end-idx read-byte!))
    target))

(defn deserialize! (read-byte!)
  (let ((type-prefix (read-byte!)))
    (cond
     ((eq? type-prefix *serialize-prefix-nil*) nil)
     ((eq? type-prefix *serialize-prefix-cons*)
      (cons (deserialize! read-byte!)
            (deserialize! read-byte!)))
     ((eq? type-prefix *serialize-prefix-array*)
      (let ((size (deserialize-integer! read-byte!)))
        (deserialize-into-array! (make-array size) 0 size read-byte!)))
     ((eq? type-prefix *serialize-prefix-character*)
      (num->char (read-byte!)))
     ((eq? type-prefix *serialize-prefix-symbol*)
      (string->symbol (deserialize! read-byte!)))
     ((eq? type-prefix *serialize-prefix-string*)
      (let ((len (deserialize-integer! read-byte!)))
        ($make @string len 0
               (deserialize-into-mem-block!
                ($make-mem-block len) 0 len read-byte!))))
     ((eq? type-prefix *serialize-prefix-mem-block*)
      (let ((size (deserialize-integer! read-byte!)))
        (deserialize-into-mem-block! ($make-mem-block size)
                                     0 size read-byte!)))
     ((eq? type-prefix *serialize-prefix-smallint*)
      (deserialize-integer! read-byte!))
     ((eq? type-prefix *serialize-prefix-compiled-procedure*)
      (make-compiled-procedure (deserialize! read-byte!)  ; name
                               (deserialize! read-byte!)  ; lambda-list
                               nil                        ; frame
                               (deserialize! read-byte!)  ; bytecode
                               (deserialize! read-byte!)  ; ip
                               (deserialize! read-byte!)  ; lookup-table
                               (deserialize! read-byte!)))  ; max-stack-depth
     (true
      (error "Unsupported type for deserialization: "
             (num->char type-prefix))))))
