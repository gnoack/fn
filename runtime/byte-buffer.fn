;; Byte streams

(deftype ByteBuffer)

(defn make-byte-buffer ()
  ($make ByteBuffer
         ($make-mem-block 256)  ; buffer
         0  ; index
         256  ; buffer-size
))

(defn byte-buffer-size (byte-buffer)
  ($fields (byte-buffer (_ _buffer _index _bufsize))
    _index))

(defn byte-buffer-append! (byte-buffer byte)
  ($fields (byte-buffer (_ _buffer _index _bufsize))
    (when (<= _bufsize _index)
      (let ((new-buffer ($make-mem-block (* _index 2))))
        ($memcpy new-buffer 0
                 _buffer 0
                 _index)
        (set! _buffer new-buffer)
        (set! _bufsize (* _index 2))))
    ($mem-block-byte-set! _buffer _index byte)
    (set! _index (+ 1 _index))
    byte))

(defn byte-buffer-set! (byte-buffer pos byte)
  ($fields (byte-buffer (_ _buffer _index _bufsize))
    (assert (< pos _bufsize))
    ($mem-block-byte-set! _buffer pos byte)))

(defn byte-buffer-ref (byte-buffer pos)
  ($fields (byte-buffer (_ _buffer _index _bufsize))
    (assert (< pos _bufsize))
    ($mem-block-byte-get _buffer pos)))

;; Return a subset of the buffer as list.
(defn byte-buffer-slice (byte-buffer first last)
  (if (eq? first last)
      (list)
    ($fields (byte-buffer (_ _buffer _index _bufsize))
      (cons ($mem-block-byte-get _buffer first)
            (byte-buffer-slice byte-buffer (+ 1 first) last)))))

(defn byte-buffer->rawmem (byte-buffer)
  ($fields (byte-buffer (_ _buffer _index _bufsize))
    (let ((new-buffer ($make-mem-block _index)))
      ($memcpy new-buffer 0 _buffer 0 _index)
      new-buffer)))
