;; Predicates on characters.
(defn digit? (c)
  (and (char? c)
       (char<= #\0 c #\9)))

(defn alpha? (c)
  (and (char? c)
       (or (char<= #\a c #\z)
           (char<= #\A c #\Z))))

(defn whitespace? (c)
  (or (eq? c #\Tab)
      (eq? c #\Newline)
      (eq? c #\Space)))

(defn peg= (item)
  (peg-terminal (lambda (x) (eq? x item)) item))


(defgrammar base-grammar ()
  (def ANY          (peg-terminal ->true "anything"))
  (def DIGIT        (peg-terminal digit? "digit"))
  (def ALPHA        (peg-terminal alpha? "alphabetic"))
  (def END-OF-INPUT peg-empty)
  (def WHITESPACE   (peg-terminal whitespace? "whitespace"))
  (def EPSILON      (peg-seq))
)

;; Generated from lisp.g
(defgrammar lisp-grammar ((base ANY DIGIT END-OF-INPUT WHITESPACE)) (defrule comment () (peg-seq (peg= #\;) (peg* (peg-seq (peg-not (peg= #\Newline)) (peg-indirect ANY))))) (defrule whitespace () (peg-alt (peg-indirect WHITESPACE) (peg-indirect comment))) (defrule separator () (peg-alt (peg-indirect whitespace) (peg= #\() (peg= #\)) (peg-indirect END-OF-INPUT))) (defrule anything-but-separator () (peg-let ((_ (peg-not (peg-indirect separator))) (e (peg-indirect ANY))) e)) (defrule symbol () (peg-let ((_ (peg-not (peg= #\#))) (x (peg+ (peg-indirect anything-but-separator)))) (string->symbol (list->string x)))) (defrule character () (peg-let ((_ (peg= #\#)) (_ (peg= #\\)) (c (peg-alt (peg-let ((_ (peg-seq (peg= #\N) (peg= #\e) (peg= #\w) (peg= #\l) (peg= #\i) (peg= #\n) (peg= #\e)))) #\Newline) (peg-let ((_ (peg-seq (peg= #\S) (peg= #\p) (peg= #\a) (peg= #\c) (peg= #\e)))) #\Space) (peg-let ((_ (peg-seq (peg= #\T) (peg= #\a) (peg= #\b)))) #\Tab) (peg-let ((_ (peg= #\;))) #\;) (peg-indirect ANY))) (_ (peg-not (peg-indirect anything-but-separator)))) c)) (defrule escapedchar () (peg-alt (peg-let ((_ (peg-seq (peg= #\\) (peg= #\n)))) #\Newline) (peg-let ((_ (peg-seq (peg= #\\) (peg= #\t)))) #\Tab) (peg-let ((_ (peg= #\\)) (e (peg-indirect ANY))) e) (peg-indirect ANY))) (defrule stringchar () (peg-let ((_ (peg-not (peg= #\"))) (c (peg-indirect escapedchar))) c)) (defrule string () (peg-let ((_ (peg= #\")) (cs (peg* (peg-indirect stringchar))) (_ (peg= #\"))) (list->string cs))) (defrule integer () (peg-let ((ds (peg+ (peg-indirect DIGIT)))) (string->int (list->string ds)))) (defrule sexpression () (peg-let ((_ (peg= #\()) (es (peg* (peg-indirect expr))) (_ (peg* (peg-indirect whitespace))) (_ (peg= #\)))) es)) (defrule prefix-expr () (peg-alt (peg-let ((_ (peg= #\')) (e (peg-indirect expr))) (list 'quote e)) (peg-let ((_ (peg= #\`)) (e (peg-indirect expr))) (list 'quasiquote e)) (peg-let ((_ (peg-seq (peg= #\,) (peg= #\@))) (e (peg-indirect expr))) (list 'unquote-splicing e)) (peg-let ((_ (peg= #\,)) (e (peg-indirect expr))) (list 'unquote e)))) (defrule expr () (peg-let ((_ (peg* (peg-indirect whitespace))) (e (peg-alt (peg-indirect prefix-expr) (peg-indirect sexpression) (peg-indirect integer) (peg-indirect string) (peg-indirect character) (peg-indirect symbol)))) e)) (defrule expr_whitespace () (peg-let ((e (peg-indirect expr)) (_ (peg* (peg-indirect whitespace)))) e)) (defrule exprs () (peg-let ((es (peg* (peg-indirect expr))) (_ (peg* (peg-indirect whitespace)))) es)))

(set! base-grammar (base-grammar))
(set! lisp-grammar (lisp-grammar base-grammar))

;; Used from pegs-parser (does not consume more whitespace)
(def _lisp_expr (@@ lisp-grammar expr))

;; Public interface.
;; Returns a list of result, rest.
(defn read (in)
  ((@@ lisp-grammar expr) in list error))

(defn read-and-check-empty-remainder (rule)
  (lambda (in)
    (rule (string->list in)
	  (lambda (result rest)
	    (if (all? whitespace? rest)
		result
	      (print-parse-error-and-raise rest "Something left.")))
	  print-parse-error-and-raise)))

(def read-one (read-and-check-empty-remainder
               (@@ lisp-grammar expr_whitespace)))
(def read-all (read-and-check-empty-remainder
               (@@ lisp-grammar exprs)))
