;; Variable environments
(->true
 (def %xyz-env (linked-env-with-vars global-env (list 'x 'y 'z)))
 (def %abz-env (linked-env-with-vars %xyz-env (list 'a 'b 'z))))

(eql? '((read-var 0 0)) (env-generate-read %xyz-env 'x))
(eql? '((read-var 0 1)) (env-generate-read %xyz-env 'y))
(eql? '((read-var 0 2)) (env-generate-read %xyz-env 'z))
(eql? '((read-global-var foo)) (env-generate-read %xyz-env 'foo))

(eql? '((read-var 0 0)) (env-generate-read %abz-env 'a))
(eql? '((read-var 0 1)) (env-generate-read %abz-env 'b))
(eql? '((read-var 0 2)) (env-generate-read %abz-env 'z)) ; Shadows z in xyz-env
(eql? '((read-var 1 0)) (env-generate-read %abz-env 'x))
(eql? '((read-var 1 1)) (env-generate-read %abz-env 'y))

(eql? '((write-var 1 1)) (env-generate-write %abz-env 'y))
(eql? '((write-var 0 2)) (env-generate-write %abz-env 'z))

(->true
 ;; Predictable version of compile
 ;; where the generated gensyms are always the same.
 (defn pcompile (expr env)
   (with-gensym-scope
    (compile expr env 'call))))

(eql? '((load-value 123))
      (pcompile 123 global-env))

(eql? '((load-value #\a))
      (pcompile #\a global-env))

(eql? '((load-value (+ 1 2 3)))
      (pcompile '(quote (+ 1 2 3)) global-env))

(eql? '((read-var 0 0)  ; first var
        (load-value 42)
        (load-value 99)
        (call 3))  ; 2 arguments and one procedure.
      (pcompile '(x 42 99) %xyz-env))

(eql? '((read-var 0 0)
        (jump-if-true true-branch-1)
        ;; False branch
        (load-value 0)
        (jump after-if-2)
        ;; True branch
        (label true-branch-1)
        (load-value 10)
        (label after-if-2))
      (pcompile '(if x 10 0) %xyz-env))

(eql? '((make-lambda lambda-entry-1 5 (x))
        (jump after-lambda-2)
        ;; -- this is where the lambda starts
        (label lambda-entry-1)
        (read-global-var +)
        (read-var 0 0)  ; x
        (read-global-var +)
        (read-var 1 1)  ; b
        (read-var 1 1)  ; b
        (call 3)        ; 2 arguments and one procedure.
        (tail-call 3)   ; 2 arguments and one procedure.
        (return)
        ;; -- this is where the lambda ends
        (label after-lambda-2))
      (pcompile '(lambda (x) (+ x (+ b b))) %abz-env))

(eql? '((load-value 5)
        (write-global-var foo))
      (pcompile '(def foo 5) %xyz-env))

(eql? '((lambda (x y) (+ x y)) 1 2)
      (transform-let->lambda '(let ((x 1) (y 2)) (+ x y))))

(eql? (pcompile '((lambda (x y) (+ x y)) 1 2) global-env)
      (pcompile '(let ((x 1) (y 2)) (+ x y)) global-env))

(eql? '((load-value 42)
        (write-global-var meaning-of-life))
      (pcompile '(set! meaning-of-life 42) global-env))

(= 57 (lower-byte 12345))
(= 48 (upper-byte 12345))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Execute some real compiled functions!                    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Maximum stack depth.
(eq? 1 (max-stack-depth 99))
(eq? 1 (max-stack-depth #\a))
(eq? 1 (max-stack-depth 'foo))
(eq? 1 (max-stack-depth "foo"))
(eq? 1 (max-stack-depth '(if 1 2 3)))
(eq? 4 (max-stack-depth '(+ 1 2 3)))
(eq? 5 (max-stack-depth '(+ (+ 1 2 3)
                            (+ 1 2)
                            (+ 1)
                            1)))
(eq? 3 (max-stack-depth '(if true (+ 1 2) 0)))
(eq? 3 (max-stack-depth '(if true 0 (+ 1 2))))
(eq? 1 (max-stack-depth '(lambda (x) (+ 1 2 3 4 5 x))))
(eq? (max-stack-depth '(let ((a 1) (b 2)) 'foo))
     (max-stack-depth '((lambda (a b) 'foo) 1 2)))
(eq? 3 (max-stack-depth '(def x (+ 1 2))))
(eq? 3 (max-stack-depth '(set! x (+ 1 2))))
(eq? 3 (max-stack-depth '(progn 1 2 (+ 3 4) 5)))
(eq? 1 (max-stack-depth '(progn 1 2 3 4 5)))

;; Tests for defn-compiled
(progn
  ;; Artisanal, hand-written bytecode functions. :)

  (defn-compiled artisanal-type (foo) 2
    (read-var 0 0)  ; foo
    (read-field 0)  ; foo.type
    (return))

  (defn-compiled artisanal-set-car! (cell value) 2
    (read-var 0 1)  ; value
    (read-var 0 0)  ; cell
    (write-field 1)
    (return))

  true)

(eq? Cons (artisanal-type (cons 1 2)))

(progn
  (def artisanal-cons-cell (cons 1 2))
  (artisanal-set-car! artisanal-cons-cell 42)
  (eq? 42 (first artisanal-cons-cell)))

;; Tests for $fields
(eq? 2 (let ((x (cons 1 2)))
         ($fields (x (type car cdr))
           cdr)))

;; (eq? 3 (let ((x (cons 1 2)))
;;          ($fields (x (type car cdr))
;;            (set! cdr 3)
;;            cdr)))

(eq? 2 (let ((x (cons 1 2)))
         ($fields (x (type car cdr))
           (let ((x (cons 100 200)))
             ;; old x is shadowed, but we should still access the old one.
             cdr))))
