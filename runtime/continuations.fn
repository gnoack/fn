;; This changes to which caller a frame is returning after execution.
;; The caller is itself a frame, probably a suspended one.
(defn set-frame-caller! (frame caller)
  ($mem-set! frame 2 caller))

(defn call/cc (proc)
  (let ((call-cc-frame (frame-caller ($get-frame))))
    (defn continuation (result)
      ;; Note: set-frame-caller! may not be tail-called here.
      (set-frame-caller! ($get-frame) call-cc-frame)
      result)
    (proc continuation)))

(def *unwind-handler* error)

(defn dynamic-wind (in thunk out)
  (in)
  (let ((old-unwind-handler *unwind-handler*))
    (set! *unwind-handler*
          (lambda (reason)
            (set! *unwind-handler* old-unwind-handler)
            (out)
            (raise reason)))
    (let ((result (thunk)))
      (set! *unwind-handler* old-unwind-handler)
      (out)
      result)))

(defn catch (thunk handler)
  (let ((old-unwind-handler *unwind-handler*))
    (call/cc
     (lambda (continuation)
       (set! *unwind-handler*
             (lambda (reason)
               (set! *unwind-handler* old-unwind-handler)
               (continuation (handler reason))))
       (let ((result (thunk)))
         (set! *unwind-handler* old-unwind-handler)
         result)))))

(defn raise (reason)
  (*unwind-handler* reason))
