;; TODO: Arrays are not used from within Lisp right now.

;; Type @Array is defined in C.
(defn list-of-size (capacity)
  (if (eq? 0 capacity)
      '()
      (cons nil (list-of-size (- capacity 1)))))

(defn list->array (l)
  (apply $make (cons @Array l)))

;; An array is a fixed-size, tagged, modifiable data object.
(defn make-array (capacity)
  (list->array (list-of-size capacity)))

(defn array-size (arr)
  (assert (array? arr))
  (- ($mem-size arr) 1))

(defn array? (arr)
  (eq? @Array (type-of arr)))

(defn array->list (a)
  (defn _convert (n acc)
    (if (= 0 n)
        acc
      (_convert (- n 1)
                (cons (array-ref a (- n 1)) acc))))
  (_convert (array-size a) (list)))

(defn array-ref (arr n)
  (assert (number? n))
  (assert (< n (array-size arr)))
  ($mem-get arr (+ 1 n)))

(defn array-set! (arr n value)
  (assert (number? n))
  (assert (< n (array-size arr)))
  ($mem-set! arr (+ 1 n) value))
