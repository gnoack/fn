(eql? '(if a a-case
       (if b b-case
       (if c c-case
         (error "No match."))))
      (macroexpand
       '(cond (a a-case)
              (b b-case)
              (c c-case))))

(case 'bar
  ((foo) false)
  ((bar) true)
  (else  false))

(case 'spam
  ((foo) false)
  (else  true))

(typecase "Hello"
  ((@string) true)
  ((@array)  false)
  (else      false))

(typecase 10
  ((@string) false)
  (else      true))

(eq? 11 (match '(foo 1)
          ((foo a) (+ a 10))
          ((bar b c) (+ b c 20))
          (else 'fail)))

(eq? 6 (match '(plus 1 2 3)
         ((plus &rest args) (apply + args))
         (else 'fail)))

(match '(unexpected)
  ((expected a) false)
  (else true))

;; Does the hand-written defmacro
;; macro work?
(eql?
 '(dict-put! *macros*
             'and
             (lambda (x)
               "doc"
               (list 'if (first x)
                     (second x)
                     'false)))
 (macroexpand-rec
  '(defmacro and (x) "doc" (list 'if (first x) (second x) 'false))))

(eql?
 '(if a (if b c false) false)
 (macroexpand '(and a b c)))

(eql? 'a (macroexpand '(and a)))

(eql?
 '(if a true (if b true c))
 (macroexpand '(or a b c)))

;; Backquote / quasiquote
(eql? '(quote x)
      (macroexpand '(quasiquote x)))

(eql? '(list 'x)
      (macroexpand '(quasiquote (x))))

(eql? 'x
      (macroexpand '(quasiquote (unquote x))))

(eql? '(list x)
      (macroexpand '(quasiquote ((unquote x)))))

(eql? '(quote (quasiquote (unquote x)))
      (macroexpand '(quasiquote (quasiquote (unquote x)))))

(eql? '(list 'unquote-splicing 'xs)
      (macroexpand '(quasiquote (unquote-splicing xs))))

(eql? '(list 'foo bar)
      (macroexpand '(quasiquote (foo (unquote bar)))))

(eql? '(list 'foo 1 2 3 'bar)
      (macroexpand '(quasiquote (foo (unquote-splicing (list 1 2 3)) bar))))

(eql? 'x
      (macroexpand '(quasiquote (unquote x))))

;; Labels (letrec)
(eql?
 '(let ((odd? '*undefined*)
	(even? '*undefined*))
   (set! odd?  (lambda (x) (if (= 0 x) false
                               (even? (- x 1)))))
   (set! even? (lambda (x) (if (= 0 x) true
                               (odd? (- x 1)))))
   (odd? 7))
 (macroexpand '(labels ((odd?  (lambda (x) (if (= 0 x) false
					       (even? (- x 1)))))
			(even? (lambda (x) (if (= 0 x) true
					       (odd? (- x 1))))))
		(odd? 7))))

(labels ((odd?  (lambda (x) (if (= 0 x) false
				(even? (- x 1)))))
	 (even? (lambda (x) (if (= 0 x) true
				(odd? (- x 1))))))
  (odd? 7))

(eql? (macroexpand '(unless (< a b)
                      (error "Assertion failed: " '(< a b))))
      (macroexpand '(assert (< a b))))

(eql? '(def foo (lambda (x) 1 2 3))
      (macroexpand '(defn foo (x) 1 2 3)))

(progn
  (defn _testfunction (x)
    'discard
    (+ x 1))
  (eq? 4 (_testfunction 3)))

(eql? (macroexpand '(defn x (q)
                      (labels ((y (lambda (p) p)))
                        (y q))))
      (macroexpand '(defn x (q)
                      (defn y (p)
                        p)
                      (y q))))
