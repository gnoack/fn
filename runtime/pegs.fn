;; Transcribed from the paper
;; 'Parsing Expression Grammars' by Bryan Ford.

;; A parsing expression grammar is a function with arguments
;; (input win lose) that parses the input.  On success, `win'
;; is called with the parse result and the input remainder as
;; arguments.  On failure, `lose' is called with the input
;; remainder as first argument and potentially more arguments
;; describing the error.

(defn empty? (x)
  (nil? x))

(def peg-empty
    (lambda (input win lose)
      (if (empty? input)
	  (win '() nil)
        (lose input "Empty input expected."))))

(defn peg-terminal (predicate? displayable-name)
  (lambda (input win lose)
    (if (empty? input)
	(lose input "Wanted input, got nothing.")
	(let ((x (first input)))
	  (if (predicate? x)
	      (win x (rest input))
            (lose input 'expected displayable-name 'got x))))))

;; We assume peg2 yields a list as win result.
(defn peg-seq2 (peg1 peg2)
  (lambda (input win lose)
    (peg1 input
	  (lambda (result1 rest1)
	    (peg2 rest1
		  (lambda (result2 rest2)
		    (win (cons result1 result2)
			 rest2))
		  lose))
	  lose)))

(defn peg-winseq (input win lose)
  (win '() input))

(defn peg-alwaysfail (input win lose)
  (lose input "Fail."))

(defn peg-seq (&rest ps)
  (reduce-right peg-seq2
		ps
		peg-winseq))

(defn peg-alt2 (peg1 peg2)
  (lambda (input win lose)
    (peg1 input
	  win
	  (lambda (remainder &rest reason)
	    (peg2 input win lose)))))

(defn peg-alt (&rest ps)
  (reduce-right peg-alt2
		ps
		peg-alwaysfail))

(defn peg*er (peg input win lose)
  (peg input
       (lambda (result rest)
	 (peg*er peg
		  rest
		  (lambda (result+ rest+)
		    (win (cons result result+)
			 rest+))
		  (lambda (&rest failure-reason)
		    (win (list result) rest))))
       (lambda (&rest failure-reason)
	 (win '() input))))

; Matches 0 or more sequential occurrences of peg.
(defn peg* (peg)
  (lambda (input win lose)
    (peg*er peg input win lose)))

; Matches 1 or more sequential occurrences of peg.
(defn peg+ (peg)
  (peg-seq2 peg (peg* peg)))

(defn peg-not (peg)
  (lambda (input win lose)
    (peg input
	 (lambda (result rest)
	   (lose input "Should not match."))
	 (lambda (&rest failure-reason)
	   (win nil input)))))

; Result transformation.
(defn peg=> (peg transform)
  (lambda (input win lose)
    (peg input
	 (lambda (result rest)
	   (win (transform result) rest))
	 lose)))

(defn applicator (fun)
  (lambda (arglist)
    (apply fun arglist)))

(defmacro peg-let (bindings action)
  `(peg=> (peg-seq ,@(map second bindings))
          (applicator (lambda ,(map first bindings)
                        ,action))))

;; PEG utilities
(defn parses? (peg input)
  (peg input ->true ->false))

(defn parse-fail? (peg input)
  (not (parses? peg input)))

(defn print-parse-error-and-raise (remainder &rest reason)
  (println "*PARSE ERROR")
  (println "At: " (pprint (list->string (take 50 remainder))))
  (println "     ^")
  (raise reason))


(defmacro peg-indirect (name &rest args)
  (if (nil? args)
      `(lambda (input win lose)
         (,name input win lose))
    `(,name ,@args)))

(defmacro defrule (name params peg)
  (if (nil? params)
      `(def ,name ,peg)
    `(defn ,name ,params ,peg)))

(defmacro defgrammar (name import-clauses &rest rules)
  (let ((rules (map macroexpand rules)))
    `(def ,name
       (lambda ,(map first import-clauses)
         (import ,import-clauses
           ,@rules
           (make-module ,@(map (lambda ((_def name rule)) name)
                               rules)))))))

