;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Types                                                          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The type type links to itself: @type = ($make @type (make-dict))
(def @type ($make 1 2 3))
($mem-set! @type 0 @type)
($mem-set! @type 1 (make-dict))
($mem-set! @type 2 "@type")
(defn type? (x)
  (eq? (type-of x) @type))

; @cons and others must be created early for object creation from C,
; so we need some retroactive patching.  Idea is still this:
;  (def @cons ($make @type (make-dict)))
(defn $patch-type! (type name)
  ($mem-set! type 0 @type)
  ($mem-set! type 1 (make-dict))
  ($mem-set! type 2 name))

;; TODO: Refactor duplication in strings and symbols.
($patch-type! @array "@array")
($patch-type! @cons "@cons")
($patch-type! @continuation "@continuation")
($patch-type! @dframe "@dframe")
($patch-type! @dict "@dict")
($patch-type! @frame "@frame")
($patch-type! @string "@stack")
($patch-type! @string "@string")
($patch-type! @symbol "@symbol")

; Same procedure for @procedure.
($patch-type! @procedure "@procedure")
($patch-type! @native-procedure "@native-procedure")
($patch-type! @compiled-procedure "@compiled-procedure")

;; TODO: Supertypes?
(defmacro deftype (name)
  `(def ,name ($make @type (make-dict) ,(symbol->string name))))

(deftype @smallint)
(deftype @character)
(deftype @nil)
(deftype @mem-block)

(defn dict? (obj)
  (eq? (type-of obj) @dict))

;; Hardcoded for half-primitive values like integers,
;; characters, nil and so forth.  For higher-level,
;; memory-allocated values, the value at position 0
;; is used as type.
(defn type-of (x)
  (cond ((number? x) @smallint)
	((char? x) @character)
	((nil? x) @nil)
        ((mem-block? x) @mem-block)
	((mem? x) ($mem-get x 0))))

(defn type-name (type)
  (assert (type? type))
  ($mem-get type 2))

;;; Method definition

(defn install-method! (type selector method)
  (assert (type? type))
  (dict-put! ($mem-get type 1) selector method))

(defmacro defm (type selector args &rest body)
  `(install-method! ,type ,selector
                    (lambda (self ,@args) ,@body)))


;;; Message sending

(defn send (receiver message &rest arguments)
  (defn %method-for-type (type selector)
    (dict-get ($mem-get type 1) selector))
  (if (procedure? receiver)
      (apply receiver (cons message arguments))
      (apply (%method-for-type (type-of receiver) message)
             (cons receiver arguments))))

(defn has-method? (receiver selector)
  ;; Limitation: Only works for proper objects, not for functions.
  (and (not (procedure? receiver))
       (dict-has-key? ($mem-get (type-of receiver) 1)
                      selector)))

;; Like apply, but for sending messages.
(defn send-apply (receiver message arguments)
  (apply send (cons receiver (cons message arguments))))

(defn sender (message)
  (lambda (receiver &rest args)
    (send-apply receiver message args)))
