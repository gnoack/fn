;; TODO: Arrays are not used from within Lisp right now.

;; Type @array is defined in C.

;; TODO: Make $alloc a primitive and implement $make on top?
(defn list-of-size (capacity)
  (if (eq 0 capacity)
      '()
      (cons nil (list-of-size (- capacity 1)))))

(defn $alloc (capacity)
  (apply $make (list-of-size capacity)))

;; An array is a fixed-size, tagged, modifiable data object.
(defn make-array (capacity)
  (let ((result ($alloc (+ 2 capacity))))
    ($mem-set! result 0 @array)
    ($mem-set! result 1 capacity)
    result))

(defn list->array (l)
  ;; XXX: Space needed after `,', we don't want to splice!
  ;; ...and this is why variable names don't start with `@'.
  (apply $make `(, @array ,(length l) ,@l)))

(defn array->list (a)
  (defn _convert (n acc)
    (if (= 0 n)
        acc
      (_convert (- n 1)
                (cons (send a 'get (- n 1)) acc))))
  (_convert (send a 'size) (list)))

(defm @array 'get (n)
  (with-asserts ((number? n)
		 (< n (send self 'size)))
    ($mem-get self (+ 2 n))))

(defm @array 'set! (n value)
  (with-asserts ((number? n)
		 (< n (send self 'size)))
    ($mem-set! self (+ 2 n) value)))

(defm @array 'size ()
  ($mem-get self 1))
