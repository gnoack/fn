
(

;; TODO: Make $alloc a primitive and implement $make on top?
(defn list-of-size (capacity)
  (if (eq 0 capacity)
      '()
      (cons nil (list-of-size (- capacity 1)))))

(defn $alloc (capacity)
  (apply $make (list-of-size capacity)))

;; Type
(deftype @array)

;; An array is a fixed-size, tagged, modifiable data object.
(defn make-array (capacity)
  (let ((result ($alloc (+ 2 capacity))))
    (progn
      ($mem-set! result 0 @array)
      ($mem-set! result 1 capacity)
      result)))

(defm @array 'get (n)
  (with-asserts ((number? n)
		 (< n (send self 'size)))
    ($mem-get self (+ 2 n))))

(defm @array 'set! (n value)
  (with-asserts ((number? n)
		 (< n (send self 'size)))
    ($mem-set! self (+ 2 n) value)))

(defm @array 'size ()
  ($mem-get self 1))

)
