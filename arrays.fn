;; TODO: Arrays are not used from within Lisp right now.

;; Type @array is defined in C.

;; TODO: Make $alloc a primitive and implement $make on top?
(defn list-of-size (capacity)
  (if (eq? 0 capacity)
      '()
      (cons nil (list-of-size (- capacity 1)))))

(defn $alloc (capacity)
  (apply $make (list-of-size capacity)))

;; An array is a fixed-size, tagged, modifiable data object.
(defn make-array (capacity)
  (let ((result ($alloc (+ 2 capacity))))
    ($mem-set! result 0 @array)
    ($mem-set! result 1 capacity)
    result))

(defn list->array (l)
  ;; XXX: Space needed after `,', we don't want to splice!
  ;; ...and this is why variable names don't start with `@'.
  (apply $make `(, @array ,(length l) ,@l)))

(defn array->list (a)
  (defn _convert (n acc)
    (if (= 0 n)
        acc
      (_convert (- n 1)
                (cons (array-ref a (- n 1)) acc))))
  (_convert (array-size a) (list)))

(defn array-ref (arr n)
  (assert (number? n))
  (assert (< n (array-size arr)))
  ($mem-get arr (+ 2 n)))

(defn array-set! (arr n value)
  (assert (number? n))
  (assert (< n (array-size arr)))
  ($mem-set! arr (+ 2 n) value))

(defn array-size (arr)
  (assert (array? arr))
  ($mem-get arr 1))

(defn array? (arr)
  (eq? @array (type-of arr)))
