
The compiler
============

* The compiler translates Lisp to an intermediate S-expression language,
* The assembler translates the intermediate S-exp language to bytecode.
* The bytecode and the intermediate language are very simple to map to
  each other, with the exception that in bytecode, jump target indexes
  are already resolved and the oop lookup table is constructed.

The C-based compiler
====================

The same compiler is also implemented in C.  The C variant skips the
intermediate representation in memory and writes the resulting
bytecode on the fly.

Bytecode / Intermediate language
================================

* There are no registers, the language is stack-based.
* A piece of code to jump into is represented as list of three items:
  (position, bytecode, oop-lookup-table)

  - bytecode is a primitive memory buffer that contains the byte code
  - position is a smallint, an index into the bytecode
  - oop-lookup-table is used whenever a literal Lisp value is
    referenced in the bytecode.  These values can't be referenced from
    within the bytecode itself because the primitive memory region
    doesn't support oop references.


label [sym]                An entry point in the intermediate code.
jump [sym]                 Unconditionally jump to label.
jump-if-true [sym]         Pop top of stack, jump if contains the "true" value.
                           Otherwise, expect "false" value.

load-value [val]           Loads the given value and pushes it on the stack.
                           This literal value is looked up in the oop-lookup table.

read-var [n] [m]           Read the m-th argument in the n-th frame from here
                           and push it to the stack.
write-var [n] [m]          Write (in position as above),
                           also push the written item to the stack.

read-global-var [sym]      Like read-var, write-var.
write-global-var [sym]

discard                    Remove one item from the stack.
                           This is only used to discard the top of the stack now,
                           the result is not saved anywhere.  (TODO: Rename?)
                           Note: push is not needed any more.

make-lambda [sym] [s-sz] [ll]
                           Create a closure capturing the current environment,
                           whose code starts at the given label, and
                           which has the given lambda list.
                           `ll': looked up in oop-lookup-table
			   `s-sz': stack size to allocate for this function
                           `sym': resolved at compile time to a bytecode position

call [n]                   Take topmost n things from stack and use them to call
                           a function.  The procedure needs to be deepest in the
                           stack, the other items on the stack are arguments.
                           After the call returns, the result value of the call
                           will have been pushed on the stack.
tail-call [n]              Same, but skips the current frame when returning.

return                     Pop result value from stack.
                           Restore interpreter state before last call instruction.
                           Push result value to stack.

tail-call-apply            TODO: Used so that apply can be implemented in bytecode
                           and still have tail calls.

read-field [n]             Pop target object from stack
                           Read the object's nth field. 0 is its type.
                           Push the nth field value to the stack.
                           This assumes the object is_mem.

write-field [n]            Pop value from stack
                           Peek target object on stack
                           Assign the value to the object's nth field.
                           (Leaves the value on the stack.)
