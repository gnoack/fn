
;; Makes a dictionary with the values of the given symbols.  e.g. in
;; an environment where a and b are defined to 1 and 2,
;;
;;  (make-module a b) --> #{ a: 1, b: 2 }
(defmacro make-module (&rest symbols)
  (with-gensyms (result)
    `(let ((,result (make-dict)))
       ,@(map (lambda (sym)
                (with-asserts ((symbol? sym))
                  `(dict-put! ,result ',sym ,sym)))
              symbols)
       ,result)))

(defn expand-module-clauses (module-clauses)
  (defn expand-module-clause ((module-name &rest vars))
    (map (lambda ((new-var-name old-var-name))
           `(,new-var-name (dict-get ,module-name ',old-var-name)))
         vars))
  (apply append (map expand-module-clause module-clauses)))

(defmacro import (module-clauses &rest body)
  `(let ,(expand-module-clauses module-clauses)
     ,@body))
