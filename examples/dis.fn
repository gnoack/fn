;; Simple disassembler for FN bytecode,
;; similar to Python's `dis' module.
;;
;; Usage:
;; (def x (dis cons))
;; (x)
;; (x)
;; (x)
;; Each invocation of 'x' yields the next instruction.

(defn mem-block-reader (mem-block index)
  (lambda ()
    (unless (< index (mem-block-size mem-block))
      (raise 'stop-iteration))
    (set! index (+ 1 index))
    ($mem-block-byte-get mem-block (- index 1))))

(defn dis-code (bytecode startpos oop-table)
  (def read-byte! (mem-block-reader bytecode startpos))
  (defn read-address! ()
    (+ (* 256 (read-byte!)) (read-byte!)))
  (defn read-oop! ()
    (array-ref oop-table (read-byte!)))

  (defn read-instruction! ()
    (let ((bytecode (read-byte!)))
      (case bytecode
	((0) `(jump ,(read-address!)))
	((1) `(jump-if-true ,(read-address!)))
	((2) `(load-value ,(read-oop!)))
	((3) `(read-var ,(read-byte!) ,(read-byte!)))
	((4) `(write-var ,(read-byte!) ,(read-byte!)))
	((5) `(read-global-var ,(read-oop!)))
	((6) `(write-global-var ,(read-oop!)))
	((7) '(discard))
	((8) `(make-lambda ,(read-address!) ,(read-byte!) ,(read-oop!)))
	((9) `(call ,(read-byte!)))
	((10) `(tail-call ,(read-byte!)))
	((11) '(return))
	((12) '(tail-call-apply))
        ((13) `(read-field ,(read-byte!)))
        ((14) `(write-field ,(read-byte!)))
	(else (raise 'unknown-bytecode)))))
  read-instruction!)

(defn dis-fn (fn)
  (dis-code ($mem-get fn 5)
	    ($mem-get fn 6)
	    ($mem-get fn 7)))

(defn dis (fn)
  (def next-instruction! (dis-fn fn))
  (defn print-remaining! ()
    (println (next-instruction!))
    (print-remaining!))
  (catch print-remaining!
    identity))
