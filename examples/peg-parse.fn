(defn load-grammar! (filename)
  (_pp_grammar (string->list (file->string filename))
               (lambda (result rest)
                 (println "Loaded grammar " filename)
                 (eval result))
               error))

(load-grammar! "examples/lisp.g")


(defgrammar base-grammar ()
  (def ANY        _any)
  (def DIGIT      _digit)
  (def EMPTY      (peg-seq))
  (def WHITESPACE _whitespace)
)
(set! base-grammar (base-grammar))

(def parse-lisp (dict-get (lisp-grammar base-grammar) 'expr))

(println (parse-lisp (string->list "123") list list))

;; (def content (file->string file))
;; (_pp_grammar (string->list content)
;;              (lambda (result rest)
;;                (println "INPUT:")
;;                (println content)
;;                (println "OUTPUT:")
;;                (println result)
;;                (println "MACROEXPANDED:")
;;                (println (macroexpand result))
;;                (println (dict-get ((eval result)) 'newline))
;;                (println "Rest was \"" (list->string rest) "\""))
;;              error)

true