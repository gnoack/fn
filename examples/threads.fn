;; ---

;; TODO: Queues are limited to the initial queue size, this is bad.
(defstruct Queue (_array _begin _end)
  (constructor new ()
    (set! _array (make-array 10))
    (set! _begin 0)
    (set! _end   0))

  (method size ()
    (mod (- (+ (array-size _array) _end)
            _begin)
         (array-size _array)))

  (method push! (item)
    (array-set! _array _end item)
    (set! _end (mod (+ 1 _end) (array-size _array))))

  (method pop! ()
    (assert (< 0 (! self size)))
    (let ((old-begin _begin))
      (set! _begin (mod (+ 1 _begin) (array-size _array)))
      (array-ref _array old-begin))))

;; ---

(def *thread-queue* (! Queue new))

(defn next-thread! ()
  (! *thread-queue* push! (frame-caller ($get-frame)))
  ;; Note: set-frame-caller! may not be tail-called here.
  (set-frame-caller! ($get-frame) (! *thread-queue* pop!))
  nil)

(defn thread-die! ()
  ;; Note: set-frame-caller! may not be tail-called here.
  (set-frame-caller! ($get-frame) (! *thread-queue* pop!))
  nil)

(defn thread-new! (thunk)
  (! *thread-queue* push! (frame-caller ($get-frame)))
  ;; Note: set-frame-caller! may not be tail-called here.
  (set-frame-caller! ($get-frame) '*should-never-be-used*)
  ;; thread-die! needs to happen under all circumstances.
  (dynamic-wind ->true thunk thread-die!))

(defn go (fn &rest args)
  (thread-new! (lambda () (apply fn args))))
