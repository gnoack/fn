
;; Relying on first, rest, cons
;; Relying on char->num num->char
;; + -

(

(defn digit->int (digit)
  (- (char->num digit) (char->num #\0)))

(defn string->int (str)
  (reduce (lambda (init next)
	    (+ (* 10 init) next))
	  (map digit->int str)
	  0))

(defn eql (a b)
  (if (and (cons? a) (cons? b))
      (and (eql (first a) (first b))
	   (eql (rest a) (rest b)))
      (eq a b)))

(defn nth (seq n)
  (if (cons? seq)
      (if (eq n 0)
	  (first seq)
	  (nth (rest seq) (- n 1)))
      nil))  ; Nothing found.

(defn length (seq)
  (if (cons? seq)
      (+ 1 (length (rest seq)))
      0))

;; Reversing sequences.
(defn _reverse (seq acc)
  (if (cons? seq)
      (_reverse (rest seq)
		(cons (first seq) acc))
      acc))

(defn reverse (seq)
  (_reverse seq nil))

;; Integer to string conversion.
(def _hex-digits "0123456789abcef")
(defn _int->string (n base)
  (if (eq n 0)
      (list)
      (cons (nth _hex-digits (mod n base))
	    (_int->string (/ n base) base))))

(defn int->string (n base)
  (reverse (_int->string n base)))

)