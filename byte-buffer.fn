;; Byte streams

(deftype @byte-buffer)

(defn make-byte-buffer ()
  ($make @byte-buffer
         ($make-mem-block 256)  ; buffer
         0  ; index
         256  ; buffer-size
))

(defn byte-buffer-size (byte-buffer)    ($mem-get byte-buffer 2))
(defn byte-buffer-bufsize (byte-buffer) ($mem-get byte-buffer 3))

(defn byte-buffer-append! (byte-buffer byte)
  (let ((buffer  ($mem-get byte-buffer 1))
        (index   ($mem-get byte-buffer 2))
        (bufsize ($mem-get byte-buffer 3)))
    (when (<= bufsize index)
      (let ((new-buffer ($make-mem-block (* index 2))))
        ($memcpy new-buffer 0
                 buffer 0
                 index)
        (set! buffer new-buffer)
        ($mem-set! byte-buffer 1 new-buffer)
        ($mem-set! byte-buffer 3 (* index 2))))
    ($mem-block-byte-set! buffer index byte)
    ($mem-set! byte-buffer 2 (+ 1 index)) ; size
    byte))

(defn byte-buffer-set! (byte-buffer pos byte)
  (with-asserts ((< pos (byte-buffer-bufsize byte-buffer)))
    ($mem-block-byte-set! ($mem-get byte-buffer 1) pos byte)))

(defn byte-buffer-ref (byte-buffer pos)
  (with-asserts ((< pos (byte-buffer-bufsize byte-buffer)))
    ($mem-block-byte-get ($mem-get byte-buffer 1) pos)))

(defn byte-buffer-slice (byte-buffer first last)
  (if (eq first last)
      (list)
    (cons ($mem-block-byte-get ($mem-get byte-buffer 1) first)
          (byte-buffer-slice byte-buffer (+ 1 first) last))))

(defn byte-buffer->rawmem (byte-buffer)
  (let ((index (byte-buffer-size byte-buffer)))
    (let ((new-buffer ($make-mem-block index)))
      ($memcpy new-buffer 0
               ($mem-get byte-buffer 1) 0
               index)
      new-buffer)))
