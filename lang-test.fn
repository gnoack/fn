(

;; if-true
;; (if true 5 50) --> 5
(eq 5 (if true 5 50))

;; if-false
;; (if false 5 50) --> 50
(eq 50 (if false 5 50))

;; cascaded ifs
;;     (if (if false false true) 5 50)
;; --> (if true 5 50)
;; --> 5
(eq 5 (if (if false false true)
	  5
	  50))

;; globally bound function
;; (+ 3 7) --> 10
(eq 10 (+ 3 7))

;; simple lambda expression
;; ((lambda (x) (+ x 1)) 5) --> 6
(eq 6 ((lambda (x)
	 (+ x 1))
       5))

;; simple let
(eq 3 (let ((x 3)) x))

;; Quote
(eq 3 '3)
(eq #\a '#\a)
(eql (cons 1 (cons 2 (cons 3 nil)))
     '(1 2 3))

;; def -- already tested in utils
;; evaluation in environments


;; TODO: Tests for: Cond.

;; Primitives...

)