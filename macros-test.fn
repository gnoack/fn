(

(eql '(if a a-case
      (if b b-case
      (if c c-case
            (error "No match."))))
     (macroexpand
      '(cond (a a-case)
             (b b-case)
             (c c-case))))

(eql (macroexpand '(let ((sym_ 'foo))
                    (cond
                      ((eq 'foo sym_) 1)
                      ((eq 'bar sym_) 2)
                      ((eq 'baz sym_) 3)
                      (true           4))))
     (macroexpand '(case 'foo
                    ((foo) 1)
                    ((bar) 2)
                    ((baz) 3)
                    (else  4))))

;; Does the hand-written defmacro
;; macro work?
(eql
 '(def *macros*
     (acons 'and
	    (lambda (x)
	      (list 'if (first x)
		    (first (rest x))
		    'false))
	    *macros*))
 (macroexpand-rec
  '(defmacro and (x)
    (list 'if (first x)
          (first (rest x))
          'false))))

(eql
 '(if a (if b c false) false)
 (macroexpand '(and a b c)))

(eql 'a (macroexpand '(and a)))

(eql
 '(if a true (if b true c))
 (macroexpand '(or a b c)))

;; Backquote
(eql '(quote x)
     (macroexpand '(backquote x)))

(eql '(append (list 'x))
     (macroexpand '(backquote (x))))

(eql '(append (list x))
     (macroexpand '(backquote ((unquote x)))))

(eql '(append xs)
     (macroexpand '(backquote ((unquote-list xs)))))

(eql
 '(append (list 'foo) (list bar))
 (macroexpand '(backquote (foo (unquote bar)))))

(eql
 '(append (list 'foo) (list 1 2 3) (list 'bar))
 (macroexpand '(backquote (foo (unquote-list (list 1 2 3)) bar))))

;; TODO: Fix backquotes.
;; (eql
;;  'x
;;  (macroexpand '(backquote (unquote x))))
;; (eql
;;  '(quote (list x))
;;  (macroexpand '(backquote (list (backquote (list (unquote x)))))))

;; Labels (letrec)
(eql
 '(let ((odd? '*undefined*)
	(even? '*undefined*))
   (progn
     ($set! odd?  (lambda (x) (if (eq 0 x) false
				  (even? (- x 1)))))
     ($set! even? (lambda (x) (if (eq 0 x) true
				  (odd? (- x 1)))))
     (odd? 7)))
 (macroexpand '(labels ((odd?  (lambda (x) (if (eq 0 x) false
					       (even? (- x 1)))))
			(even? (lambda (x) (if (eq 0 x) true
					       (odd? (- x 1))))))
		(odd? 7))))

(labels ((odd?  (lambda (x) (if (eq 0 x) false
				(even? (- x 1)))))
	 (even? (lambda (x) (if (eq 0 x) true
				(odd? (- x 1))))))
  (odd? 7))

(eql '(if (number? n)
       (+ 1 n)
       (error "Assertion failed: " (pprint '(number? n))))
     (macroexpand '(with-asserts ((number? n)) (+ 1 n))))
)
