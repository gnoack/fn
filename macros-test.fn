(

(eql '(if a a-case
      (if b b-case
      (if c c-case
            (error "No match."))))
     (macroexpand
      '(cond (a a-case)
             (b b-case)
             (c c-case))))

(eql (macroexpand '(let ((sym_ 'foo))
                    (cond
                      ((eq 'foo sym_) 1)
                      ((eq 'bar sym_) 2)
                      ((eq 'baz sym_) 3)
                      (true           4))))
     (macroexpand '(case 'foo
                    ((foo) 1)
                    ((bar) 2)
                    ((baz) 3)
                    (else  4))))

;; Does the hand-written defmacro
;; macro work?
(eql
 '(dict-put! *macros*
             'and
             (lambda (x)
               "doc"
               (list 'if (first x)
                     (second x)
                     'false)))
 (macroexpand-rec
  '(defmacro and (x) "doc" (list 'if (first x) (second x) 'false))))

(eql
 '(if a (if b c false) false)
 (macroexpand '(and a b c)))

(eql 'a (macroexpand '(and a)))

(eql
 '(if a true (if b true c))
 (macroexpand '(or a b c)))

;; Backquote / quasiquote
(eql '(quote x)
     (macroexpand '(quasiquote x)))

(eql '(list 'x)
     (macroexpand '(quasiquote (x))))

(eql 'x
     (macroexpand '(quasiquote (unquote x))))

(eql '(list x)
     (macroexpand '(quasiquote ((unquote x)))))

(eql '(quote (quasiquote (unquote x)))
     (macroexpand '(quasiquote (quasiquote (unquote x)))))

(eql '(list 'unquote-splicing 'xs)
     (macroexpand '(quasiquote (unquote-splicing xs))))

(eql '(list 'foo bar)
     (macroexpand '(quasiquote (foo (unquote bar)))))

(eql '(list 'foo 1 2 3 'bar)
     (macroexpand '(quasiquote (foo (unquote-splicing (list 1 2 3)) bar))))

(eql 'x
     (macroexpand '(quasiquote (unquote x))))

;; Labels (letrec)
(eql
 '(let ((odd? '*undefined*)
	(even? '*undefined*))
   (set! odd?  (lambda (x) (if (= 0 x) false
                               (even? (- x 1)))))
   (set! even? (lambda (x) (if (= 0 x) true
                               (odd? (- x 1)))))
   (odd? 7))
 (macroexpand '(labels ((odd?  (lambda (x) (if (= 0 x) false
					       (even? (- x 1)))))
			(even? (lambda (x) (if (= 0 x) true
					       (odd? (- x 1))))))
		(odd? 7))))

(labels ((odd?  (lambda (x) (if (= 0 x) false
				(even? (- x 1)))))
	 (even? (lambda (x) (if (= 0 x) true
				(odd? (- x 1))))))
  (odd? 7))

(eql '(if (number? n)
       (+ 1 n)
       (error "Assertion failed: " '(number? n)))
     (macroexpand '(with-asserts ((number? n)) (+ 1 n))))

(eql '(if (number? n)
          (if (< 3 n)
              (+ 1 n)
            (error "Assertion failed: "  '(< 3 n)))
        (error "Assertion failed: "  '(number? n)))
     (macroexpand '(with-asserts ((number? n)
                                  (< 3 n))
                     (+ 1 n))))

(eql '(def foo (lambda (x) 1 2 3))
     (macroexpand '(defn foo (x) 1 2 3)))

(progn
  (defn _testfunction (x)
    'discard
    (+ x 1))
  (eq 4 (_testfunction 3)))

)
