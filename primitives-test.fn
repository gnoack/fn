;; Cons, first, rest
(eq? 3 (first (cons 3 4)))
(eq? 4 (rest (cons 3 4)))

;; Character conversion
(eq? 65 (char->num #\A))
(eq? #\A (num->char 65))

;; Symbol conversion.
(eq? 'quuux (string->symbol "quuux"))
(string=? "quuux" (symbol->string 'quuux))

;; Arithmetic primitives.
(eq? 3 (+ 1 2))
(eq? 10 (+ 1 2 3 4))
(eq? 12 (* 3 4))
(eq? 3 (- 10 7))

;; Division.
(eq? 3 (/ 12 4))
(eq? 3 (/ 13 4))
(eq? 3 (/ 14 4))
(eq? 3 (/ 15 4))
(eq? 0 (mod 12 4))
(eq? 1 (mod 13 4))
(eq? 2 (mod 14 4))
(eq? 3 (mod 15 4))

;; Comparison
(integer<= 1 2)
(integer<= 42 42)

;; Primitive type predicates
; cons?
(cons? (cons 1 2))
(not (cons? #\a))
(not (cons? 1))
(not (cons? 'foo))
; mem?
(mem? (cons 1 2))
(mem? "foo")  ; Strings are memory objects, too.
(mem? 'foo)  ; Symbols, too.
(not (mem? #\a))
(not (mem? 1))
; string?
(string? "foo")
(not (string? #\a))
(not (string? 1))
(not (string? 'foo))
(not (string? (cons 1 2)))
; char?
(char? #\a)
(not (char? (cons 1 2)))
(not (char? 2))
(not (char? "foo"))
(not (char? 'foo))
; number?
(number? 3)
(not (number? (cons 1 2)))
(not (number? "foo"))
(not (number? #\a))
(not (number? 'foo))
;; symbol?
(symbol? 'something)
(not (symbol? (cons 1 2)))
(not (symbol? "xyz"))
(not (symbol? #\a))
(not (symbol? 3))

; Apply
(eql? (list 1 2 3)
      (apply list (list 1 2 3)))

; Writeout
; Prints its argument and returns it.

; Commented out for nicer output...
; (string=? "foo" (writeout "foo"))

;; UNSAFE functions for memory region allocation.
(cons? ($make @cons 1 2))
(not (cons? ($make 'blubb 1 2)))

(eq? 'b ($mem-get ($make 'a 'b 'c) 1))

(progn
  (def alphabet ($make 'a 'b 'c 'd 'e 'f))
  ($mem-set! alphabet 3 'surprise)
  (eq? 'surprise ($mem-get alphabet 3)))

;; UNSAFE functions for unsafe memory block allocation.
(mem-block? ($make-mem-block 10))

(progn
  (def m ($make-mem-block 5))
  ($mem-block-byte-set! m 0 3)
  (eq? 3 ($mem-block-byte-get m 0)))
