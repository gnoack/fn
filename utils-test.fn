(


; Appending lists
(eql (list 'a 'b 'c 'd 'e)
     (append (list 'a 'b 'c)
	     (list 'd 'e)))

(eql (list 'a 'b)
     (append '() (list 'a 'b)))

(eql (list 'a 'b)
     (append (list 'a 'b) '()))

; Integer parsing.
(eq 123 (string->int "123"))

; Lists
(eq 3 (nth (list 1 2 3 4 5) 2))
(eq #\d (nth "abcdefg" 3))
(eq 6 (length "abcdef"))
(eql "abc" (reverse "cba"))
(list? '(1 2 3))
(list? '())
(not (list? 1))
(not (list? (cons 1 2)))

; Digit to int
(eq 3 (digit->int #\3))

; Integer coding
(eql "1" (int->string 1 10))
(eql "123" (int->string 123 10))

;; Comparisons
(<= 1 2)
(<= 2 2)
(not (<= 2 1))
(< 1 2)
(not (< 2 2))
(not (< 2 1))
(< 1 2 3)
(not (< 3 4 1))
(not (< 1 1 2))
(<= 1 1 2)
(char<= #\a #\a #\b #\c)
(not (char<= #\a #\c #\b))

; Reducing
(eql (cons (cons (cons nil 'a) 'b) 'c)
     (reduce cons (list 'a 'b 'c) nil))

(eql (list 'a 'b 'c)
     (reduce-right cons (list 'a 'b 'c) nil))

;; String concat
(eql "foobarbaz" (string-concat "foo" "bar" "baz"))
(eql '() (string-concat))

;; All-predicate
(all? (list true true true))
(not (all? (list true true false)))
(all? (list))

;; Range
(eql (list 0 1 2 3 4 5 6) (range 7))
(eql (list) (range 0))
(eql (list 0) (range 1))

;; Map2
(eql (list (cons 'a 1)
	   (cons 'b 2)
	   (cons 'c 3))
     (map2 cons
	   (list 'a 'b 'c)
	   (list 1 2 3)))

)

