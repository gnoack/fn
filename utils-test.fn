(

; First, second, third
(eq 1 (first '(1 2 3 4 5 6)))
(eq 2 (second '(1 2 3 4 5 6)))
(eq 3 (third '(1 2 3 4 5 6)))
(eq 4 (fourth '(1 2 3 4 5 6)))
(eq 6 (last '(1 2 3 4 5 6)))
(eq 'result (progn 1 2 3 'result))

; Appending lists
(eql (list 'a 'b 'c 'd 'e)
     (append (list 'a 'b 'c)
	     (list 'd 'e)))

(eql (list 'a 'b)
     (append '() (list 'a 'b)))

(eql (list 'a 'b)
     (append (list 'a 'b) '()))

(eql '() (append))

; Integer parsing.
(eq 123 (string->int "123"))

; Lists
(eq 3 (nth (list 1 2 3 4 5) 2))
(eq 5 (nth (list 5 6) 0))
(eq 6 (nth (list 5 6) 1))
(eq #\d (nth "abcdefg" 3))
(eq 6 (length "abcdef"))
(eq 2 (length (list 1 2)))

(list? '(1 2 3))
(list? '())
(not (list? 1))
(not (list? (cons 1 2)))

; Digit to int
(eq 3 (digit->int #\3))

; Integer coding
(eql "1" (int->string 1 10))
(eql "123" (int->string 123 10))

;; Comparisons
(<= 1 2)
(<= 2 2)
(not (<= 2 1))
(< 1 2)
(not (< 2 2))
(not (< 2 1))
(< 1 2 3)
(not (< 3 4 1))
(not (< 1 1 2))
(<= 1 1 2)
(char<= #\a #\a #\b #\c)
(not (char<= #\a #\c #\b))

; Reducing
(eql (cons (cons (cons nil 'a) 'b) 'c)
     (reduce cons (list 'a 'b 'c) nil))

(eql (list 'a 'b 'c)
     (reduce-right cons (list 'a 'b 'c) nil))

;; All-predicate
(all? (list true true true))
(not (all? (list true true false)))
(all? (list))

)

