(

(eq 3 (+ 1 2))
(eq 65 (char->num #\A))
(eq 3 (digit->int #\3))

; AND
(eq true (and true true))
(eq false (and true false))
(eq false (and false true))
(eq false (and false false))

; Map
(eql (cons 2 (cons 3 nil))
     (cons 2 (cons 3 nil)))

(eql (cons 3 (cons 4 nil))
     (map (lambda (x) (+ 1 x))
	  (cons 2 (cons 3 nil))))

; Reduce
(eq 6 (reduce + (cons 1 (cons 2 (cons 3 nil))) 0))

;; Primitives
(eq 12 (* 3 4))
(eq 3 (- 10 7))
; Division.
(eq 3 (/ 12 4))
(eq 3 (/ 13 4))
(eq 3 (/ 14 4))
(eq 3 (/ 15 4))
(eq 0 (mod 12 4))
(eq 1 (mod 13 4))
(eq 2 (mod 14 4))
(eq 3 (mod 15 4))

; Integer parsing.
(eq 123 (string->int "123"))

; Lists
(eq 3 (nth (list 1 2 3 4 5) 2))
(eq #\d (nth "abcdefg" 3))

)