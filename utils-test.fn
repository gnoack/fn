(

;; Lists
(eq 3 (last '(1 2 3)))
(eql '(1 2) (all-but-last '(1 2 3)))
(eql (list 'a 'b 'c)
     (filter symbol? (list "a" 'a 1 'b 'c 99)))

;; Strings
(string=? "abc" "abc")
(not (string=? "x" "y"))

(eql (list #\a #\b #\c)
     (string->list "abc"))
(string=? "hello" "hello")
(string=? "hello" (list->string (list #\h #\e #\l #\l #\o)))

(string=? "foobar" (string-append "foo" "bar"))

(string=? "a b c" (string-join (list "a" "b" "c") " "))
(string=? "" (string-join (list) " "))
(string=? "foo, bar, baz" (string-join (list "foo" "bar" "baz") ", "))

(string=? "bar" (substring "foobar" 3))
(string=? "bar" (substring (substring "foobar" 2) 1))
(string=? "bar" (substring "foobarbaz" 3 6))

(string-prefix? "foo" "foobar")
(not (string-prefix? "bar" "foobar"))
(not (string-prefix? "foobar" "foo"))

(eq #\d (string-at "abcdefg" 3))
(eq 6 (string-size "abcdef"))

;; Integer parsing.
(eq 123 (string->int "123"))

;; Digit to int
(eq 3 (digit->int #\3))

;; Integer coding
(string=? "0" (int->string 0 10))
(string=? "1" (int->string 1 10))
(string=? "123" (int->string 123 10))
(string=? "cafe" (int->string 51966 16))

;; Comparisons
(<= 1 2)
(<= 2 2)
(not (<= 2 1))
(< 1 2)
(not (< 2 2))
(not (< 2 1))
(< 1 2 3)
(not (< 3 4 1))
(not (< 1 1 2))
(<= 1 1 2)
(char<= #\a #\a #\b #\c)
(not (char<= #\a #\c #\b))

;; Reducing
(eql (cons (cons (cons nil 'a) 'b) 'c)
     (reduce cons (list 'a 'b 'c) nil))

(eql (list 'a 'b 'c)
     (reduce-right cons (list 'a 'b 'c) nil))

;; Readline completion.


)

