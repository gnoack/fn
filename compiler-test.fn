
(

(eql '(let ((x 4)
            (y 8))
       (+ x y))
     (map-letdefinitions (lambda (x) (+ 3 x))
			 '(let ((x 1)
				(y 5))
			   (+ x y))))

(eql '(+ 9 y)
     (replace-var '(+ x y) 'x 9))

; Don't replace beyond a let that redefines x
(eql '(+ 42 (let ((x 34)) x))
     (replace-var '(+ x (let ((x 34)) x)) 'x 42))

; Dispatcher
;; ((dispatcher
;;   ('foo () true)) 'foo)

;; Variable environments
(->true
 (def %e empty-env)
 (def %xyz-env (env-with-vars empty-env 'x 'y 'z)))

(not (%e 'defines-immediately? 'x))
(%xyz-env 'defines-immediately? 'x)
(%xyz-env 'defines-immediately? 'z)
(not (%xyz-env 'defines-immediately? 'notthere))

(eq 0 (%e 'immediate-size))
(eq 3 (%xyz-env 'immediate-size))

; x shadows the old x.
(eq 5 ((env-with-vars %xyz-env 'a 'x) 'immediate-size))

(eql '(load-var 1) (env-generate-read %xyz-env 'x))
(eql '(load-var 2) (env-generate-read %xyz-env 'y))
(eql '(load-var 3) (env-generate-read %xyz-env 'z))

(eql '(load-value 123
       push)
     (compile 123 %e))

(eql '(load-value 99
       push
       load-value 42
       push
       load-var 1  ; first var
       push
       pop
       call 2)     ; 2 arguments
     (compile '(x 42 99) %xyz-env))

(->true (def global-label-counter 1000))
(eql '(load-var 1
       push
       pop
       jump-if-true true-branch-1001
       ; False branch
       load-value 0
       push
       jump after-if-1002
       ; True branch
       label true-branch-1001
       load-value 10
       push
       label after-if-1002)
     (compile '(if x 10 0) %xyz-env))
)
