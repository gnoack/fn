
(

;; Variable environments
(->true
 (def %xyz-env (global-env 'linked-with-vars (list 'x 'y 'z)))
 (def %abz-env (%xyz-env 'linked-with-vars (list 'a 'b 'z))))

(string= "GLOBAL" (send global-env 'prettyprint))
(string= "(x y z)::GLOBAL" (send %xyz-env 'prettyprint))

(eql '((read-var 0 0)) (send %xyz-env 'generate-read 'x))
(eql '((read-var 0 1)) (send %xyz-env 'generate-read 'y))
(eql '((read-var 0 2)) (send %xyz-env 'generate-read 'z))
(eql '((read-global-var foo)) (send %xyz-env 'generate-read 'foo))

(eql '((read-var 0 0)) (send %abz-env 'generate-read 'a))
(eql '((read-var 0 1)) (send %abz-env 'generate-read 'b))
(eql '((read-var 0 2)) (send %abz-env 'generate-read 'z)) ; Shadows z in xyz-env
(eql '((read-var 1 0)) (send %abz-env 'generate-read 'x))
(eql '((read-var 1 1)) (send %abz-env 'generate-read 'y))

(eql '((write-var 1 1)) (send %abz-env 'generate-write 'y))
(eql '((write-var 0 2)) (send %abz-env 'generate-write 'z))

(->true
 ;; Predictable version of compile
 ;; where the generated gensyms are always the same.
 (defn pcompile (expr env)
   (set! global-label-counter 1000)
   (compile expr env)))

(eql '((load-value 123)
       (push))
     (pcompile 123 global-env))

(eql '((load-value #\a)
       (push))
     (pcompile #\a global-env))

(eql '((load-value (+ 1 2 3))
       (push))
     (pcompile '(quote (+ 1 2 3)) global-env))

(eql '((read-var 0 0)  ; first var
       (push)
       (load-value 42)
       (push)
       (load-value 99)
       (push)
       (call 3)
       (push))  ; 2 arguments and one procedure.
     (pcompile '(x 42 99) %xyz-env))

(eql '((read-var 0 0)
       (push)
       (pop)
       (jump-if-true true-branch-1001)
       ; False branch
       (load-value 0)
       (push)
       (jump after-if-1002)
       ; True branch
       (label true-branch-1001)
       (load-value 10)
       (push)
       (label after-if-1002))
     (pcompile '(if x 10 0) %xyz-env))

(eql '((make-lambda lambda-entry-1001 (x))
       (push)
       (jump after-lambda-1002)
       ; -- this is where the lambda starts
       (label lambda-entry-1001)
       (read-global-var +)
       (push)
       (read-var 0 0)  ; x
       (push)
       (read-var 1 1)  ; b
       (push)
       (call 3)  ; 2 arguments and one procedure.
       (push)
       (pop)
       (return)
       ;; -- this is where the lambda ends
       (label after-lambda-1002))
     (pcompile '(lambda (x) (+ x b)) %abz-env))

(eql '((load-value 5)
       (push)
       (pop)
       (write-global-var foo))
     (pcompile '(def foo 5) %xyz-env))

(eql '((lambda (x y) (+ x y)) 1 2)
     (transform-let->lambda '(let ((x 1) (y 2)) (+ x y))))

(eql (pcompile '((lambda (x y) (+ x y)) 1 2) global-env)
     (pcompile '(let ((x 1) (y 2)) (+ x y)) global-env))

(eql '((load-value 42)
       (push)
       (pop)
       (write-global-var meaning-of-life))
     (pcompile '(set! meaning-of-life 42) global-env))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Execute some real compiled functions!                    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(eql (cons 1 2)
     ((compile-fn cons) 1 2))

(eql (list 1 2 3)
     ((compile-fn map) identity (list 1 2 3)))

;; It works!
(progn
  (set! map (compile-fn map))
  (eql '(97 98 99)
       (map char->num (list #\a #\b #\c))))

)
