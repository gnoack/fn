
(

(eql '(let ((x 4)
            (y 8))
       (+ x y))
     (map-letdefinitions (lambda (x) (+ 3 x))
                         '(let ((x 1)
                                (y 5))
                           (+ x y))))

(eql '(+ 9 y)
     (replace-var '(+ x y) 'x 9))

; Don't replace beyond a let that redefines x
(eql '(+ 42 (let ((x 34)) x))
     (replace-var '(+ x (let ((x 34)) x)) 'x 42))

;; Variable environments
(->true
 (def %e global-env)
 (def %xyz-env (%e 'linked-with-vars (list 'x 'y 'z)))
 (def %abz-env (%xyz-env 'linked-with-vars (list 'a 'b 'z))))

(eql "GLOBAL" (send %e 'prettyprint))
(eql "(x y z)::GLOBAL" (send %xyz-env 'prettyprint))

(eql '(read-var 0 0) (send %xyz-env 'generate-read 'x))
(eql '(read-var 0 1) (send %xyz-env 'generate-read 'y))
(eql '(read-var 0 2) (send %xyz-env 'generate-read 'z))
(eql '(read-global-var foo) (send %xyz-env 'generate-read 'foo))

(eql '(read-var 0 0) (send %abz-env 'generate-read 'a))
(eql '(read-var 0 1) (send %abz-env 'generate-read 'b))
(eql '(read-var 0 2) (send %abz-env 'generate-read 'z))  ; Shadows z in xyz-env
(eql '(read-var 1 0) (send %abz-env 'generate-read 'x))
(eql '(read-var 1 1) (send %abz-env 'generate-read 'y))

(eql '(write-var 1 1) (send %abz-env 'generate-write 'y))
(eql '(write-var 0 2) (send %abz-env 'generate-write 'z))

(eql '(load-value 123
       push)
     (compile 123 %e))

(eql '(load-value 99
       push
       load-value 42
       push
       read-var 0 0  ; first var
       push
       pop
       call 2)     ; 2 arguments
     (compile '(x 42 99) %xyz-env))

(->true (def global-label-counter 1000))
(eql '(read-var 0 0
       push
       pop
       jump-if-true true-branch-1001
       ; False branch
       load-value 0
       push
       jump after-if-1002
       ; True branch
       label true-branch-1001
       load-value 10
       push
       label after-if-1002)
     (compile '(if x 10 0) %xyz-env))

)
