
(

(defn digit? (c)
  (char<= #\0 c #\9))

(defn alpha? (c)
  (char<= #\a c #\z))

(defn doublequote? (c)
  (eq #\" c))

(defn consume-while (seq want?)
  (cond ((nil? seq) (cons nil nil))
	((want? (first seq))
	 (let ((result
		(consume-while (rest seq) want?)))
	   (cons
	    (cons (first seq) (first result))
	    (rest result))))
	(true (cons nil seq))))

(defn not-doublequote? (c)
  (not (doublequote? c)))

(defn read-string (input)
  (let ((x (consume-while input not-doublequote?)))
    (cons (first x)
	  ; next character must be a doublequote.
	  (read (rest (rest x))))))

(defn read-integer (input)
  (let ((x (consume-while input digit?)))
    (cons (string->int (first x))
	  (read (rest x)))))

(defn read (in)
  (if (nil? in)
      '()
      (let ((c (first in))
	    (cs (rest in)))
	(cond ((digit? c) (read-integer in))
	      ((doublequote? c) (read-string cs))))))
)
