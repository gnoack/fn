
(

;; Predicates on characters.
(defn digit? (c)
  (and (char? c)
       (char<= #\0 c #\9)))

(defn alpha? (c)
  (and (char? c)
       (char<= #\a c #\z)))

(defn char-predicate (x)
  (lambda (c)
    (and (char? c)
	 (eq x c))))
(def doublequote? (char-predicate #\"))
(def backslash? (char-predicate #\\))

;;; ==================================
;;; Grammar
;;; ==================================

;; Terminals
(def _any (peg-terminal ->true))
(def _digit (peg-terminal digit?))
(def _alpha (peg-terminal alpha?))
(def _dblquote (peg-terminal doublequote?))
(def _backslash (peg-terminal backslash?))

;; Rules
(def _integer (peg=> (peg+ _digit) string->int))

(def _escapedchar
    (peg-alt (peg=> (peg-seq _backslash _any)
		    second)
	     _any))

(def _string-char (peg=> (peg-seq (peg-not _dblquote)
				  _escapedchar)
			 second))
				  
(def _string (peg=> (peg-seq _dblquote
			     (peg* _string-char)
			     _dblquote)
		    second))

(def _atom (peg-alt _integer
		    _string))

(def _expr _atom)

;; Def
(def _lisp_grammar _expr)


;; Public interface.
;; Returns a list of result, rest.
(defn read (in)
  (_lisp_grammar in
		 list
		 (lambda (&rest failure-reason)
		   (cons '*error* failure-reason))))
)
