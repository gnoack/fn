
(load-file "repl/c-loader.fn")
(load-c-module "repl/readline.so" "init_readline")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Readline completion.                                           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Called into from C.  (See REPL implementation.)
(defn readline-completion-entry (text state global-env)
  (when (= 0 state)
    (set! *current-completions*
          (readline-calculate-completions text global-env)))
  (if (cons? *current-completions*)
      (let ((result (first *current-completions*)))
        (set! *current-completions* (rest *current-completions*))
        result)
    nil))

;; TODO: Optimize memory usage?
(defn readline-calculate-completions (text global-env)
  (defn completions-for-dict (dict)
    (let ((names (map (lambda (x) (symbol->string (first x)))
                      (dict-key-value-pairs dict))))
    (filter (lambda (name)
              (string-prefix? text name))
            names)))
  (append (completions-for-dict global-env)
          (completions-for-dict *macros*)))


(defn with-history-file-loading (thunk)
  (lambda ()
    (let ((history-file (string-append (get-home-directory)
                                       "/.fn_history")))
      (dynamic-wind
       (lambda () (read-history history-file))
       thunk
       (lambda () (write-history history-file))))))

(defn with-restart (thunk)
  (lambda ()
    (labels ((error-happened false)
             (restart
              (lambda ()
                (catch thunk
                  (lambda (reason)
                    (println "Error: " reason)
                    (set! error-happened true)))
                (when error-happened
                  (set! error-happened false)
                  (restart)))))
      (restart))))

;; Main read-eval-print loop.
(defn repl ()
  (let ((input (readline "fn> ")))
    (if (or (nil? input)
            (string=? "" input))
        (progn
          (println)
          (println "Goodbye."))
      (progn
        (add-history input)
        (println (pprint (eval (read-one input))))
        (repl)))))

((with-history-file-loading (with-restart repl)))
